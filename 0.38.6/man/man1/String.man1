.TH oobash 1 "05 Dez 2011" bash4-Environment User Manuals "oobash-0.38.6.source"
.SH NAME
base64Decode base64Encode capitalize center charAt concat contains count endsWith equals equalsIgnoreCase reverse hashCode indexOf isAlnum isAlpha isAscii isDigit isEmpty isHexDigit isLowerCase isSpace isPrintable isUpperCase isVisible lastIndexOf length matches replaceAll replaceFirst startsWith substring swapCase toLowerCase toString toUpperCase trim title zfill compareTo compareToIgnoreCase getClass String String.digits String.asciiLetters String.asciiLettersLowerCase String.asciiLettersUpperCase String.hexDigits String.octDigits 
.SH DESCRIPTION
The String.oobash file is part of the oobash framework.
.SH EXAMPLES

               base64Decode
               Parameters:
                  None 
               Returns:
                  base64 decoded data
               Throws:
                  NotInPathException - if base64 not in path
                  DecoderException - if problem with decoding
               Example:
                  String a YWJjCg==
                  a.base64Decode
                  >>>abc  
            

               base64Encode
               Parameters:
                  None
               Returns:
                  base64 encoded data
               Throws:
                  NotInPathException - if base64 not in path
               Example:
                  String a abc
                  a.base64Encode
                  >>>YWJjCg==
            

               capitalize
                  Optimized for german, french, polish, spanish, romanian, czech, slovak, slovenian, 
                  swedish, finnish, danish, scottish gaelic, catalan, hungarian, norwegian and icelandic locale.
               Parameters:
                  None  
               Returns:
                  It returns a copy of the string with only its first character capitalized   
               Example:
                  String abC
                  a.capitalize
                  >>>Abc
            

               center  
                  This function centers a string in a field of given width. It returns a string 
                  that is at least width characters wide, created by padding the string with the 
                  space character until the given width on the right, left or both sides.
               Parameters:
                  width - integer
               Returns:
                  centered string
               Throws:
                  IllegalArgumentException - if the parameter cannot be treated as a number
               Example:
                  String a abc
                  a.center 5
                  >>>abc 
                  echo $(a.center 5)
                  >>>' abc '
            

               charAt
                  Returns the char value at the specified index. An index ranges from 
                  0 to length - 1. The first char value of the sequence is at index 0, 
                  the next at index 1, and so on, as for array indexing.
               Parameters:
                  index - the index of the char value (integer)
               Returns:
                  the char value at the specified index of this string. The first char 
                  value is at index 0.
               Throws:
                  IllegalArgumentException - if the parameter cannot be treated as a number
                  IndexOutOfBoundsException - if the index argument is negative or not less than the length of this string.
               Example:
                  String a abc
                  a.charAt 2
                  >>>c
            

               compareTo
                  Compares two strings lexicographically. The comparison is based on the Unicode value of each character 
                  in the strings. The character sequence represented by this String object is compared lexicographically 
                  to the character sequence represented by the argument string. The result is a negative integer if this 
                  String object lexicographically precedes the argument string. The result is a positive integer if this 
                  String object lexicographically follows the argument string. The result is zero if the strings are equal; 
                  compareTo returns 0 exactly when the equals(Object) method would return true. 
                  This is the definition of lexicographic ordering. If two strings are different, then either they have 
                  different characters at some index that is a valid index for both strings, or their lengths are different, 
                  or both. If they have different characters at one or more index positions, let k be the smallest such index; 
                  then the string whose character at position k has the smaller value, as determined by using the < operator, 
                  lexicographically precedes the other string. In this case, compareTo returns the difference of the two character 
                  values at position k in the two string -- that is, the value: 
                  this.charAt(k)-anotherString.charAt(k)
                  If there is no index position at which they differ, then the shorter string lexicographically precedes the 
                  longer string. In this case, compareTo returns the difference of the lengths of the strings -- that is, the value: 
                  this.length()-anotherString.length()
               Parameters:
                  anotherString - the primitive string to be compared.
               Returns:
                  the value 0 if the argument String is equal to this String; a value less than 0 
                  if this String is lexicographically less than the string argument;
                  and a value greater than 0 if this String is lexicographically greater than the String argument.
               Example:
                  String a abcd
                  a.compareTo abcd
                  >>>0
                  a.compareTo ab
                  >>>2
                  a.compareTo abcde
                  >>>-1
                  a.compareTo ""
                  >>>4
                  a.compareTo x
                  >>>-23
                  a.compareTo "ab c"
                  >>>67
               

               compareToIgnoreCase
                  Compares two String objects lexicographically, ignoring case differences. 
                  This method returns an integer whose sign is that of calling 
                  compareTo with normalized versions of the String objects where case differences 
                  have been eliminated.
               Parameters:
                  str - the String to be compared.
               Returns:
                  a negative integer, zero, or a positive integer as the specified String 
                  is greater than, equal to, or less than this String, 
                  ignoring case considerations.
               Example:
                  String a abc
                  x.compareToIgnoreCase abc
                  >>>-1
                  x.compareToIgnoreCase aY
                  >>>-23
                  x.compareToIgnoreCase ay
                  >>>-23
            

               concat
                  Concatenates the specified string to the end of this String.
                  If the length of the argument string is 0, then this String object is returned. 
                  Otherwise, a new String object is returned, 
                  representing a character sequence that is the concatenation of the character 
                  sequence represented by this String object and the character sequence represented 
                  by the argument string.
               Parameters:
                  str - the primitive string that is concatenated to the end of this string.
               Returns:
                  a string that represents the concatenation of this object's characters followed 
                  by the string argument's characters
               Example:
                  String a fff
                  a.concat abc
                  >>>fffabc  
            

               contains
                  Returns true if and only if this String contains the specified sequence of char values.
               Parameters:
                  s - the primitive string to search for
               Returns:
                  true if this String contains s, false otherwise
               Example:
                  String a "abc cd"
                  a.contains " c"
                  >>>true
                  a.contains "x"
                  >>>false
            

               count
               Parameters:
                  a primitive string
               Returns:
                  the number of non-overlapping occurrences of parameter in string.  
               Throws:
                  NotInPathException - if bc not in path
               Example:
                  String a acdccde
                  a.count c
                  >>>3
                  a.count cd
                  >>>2
            

               endsWith suffix
                  Tests if this string ends with the specified suffix.
               Parameters:
                   suffix - the suffix (a primitive string).
               Returns:
                   true if the character sequence represented by the argument is a suffix of the 
                   character sequence represented by this object; false otherwise. 
                   Note that the result will be true if the argument is the empty string or is equal 
                   to this String object as determined by the equals Object method.  
               Example:
                  String a xyz
                  a.endsWith z
                  >>>true
                  a.endsWith yz
                  >>>true
            

               equals
                  Compares this string to the specified object. 
                  The result is true if and only if the argument 
                  is a String object that represents the same sequence of 
                  characters as this object.
               Parameters:
                  anObject - The object to compare this String against
               Returns:
                  true if the given object represents a String equivalent 
                  to this string, false otherwise
               Example:
                  String a abc
                  String b abc
                  String c ddd
                  a.equals b
                  >>>true
                  a.equals c
                  >>>false
            

               equalsIgnoreCase
                  Optimized for german, french, polish, spanish, romanian, czech, slovak, slovenian, 
                  swedish, finnish, danish, scottish gaelic, catalan, hungarian, norwegian and icelandic locale.
                  Compares this String to another String, ignoring case considerations. Two strings 
                  are considered equal ignoring case if they are of the same length and corresponding 
                  characters in the two strings are equal ignoring case.
                  Two characters c1 and c2 are considered the same ignoring case if at least one of 
                  the following is true:
                     * The two characters are the same (as compared by the == operator)
                     * Applying the method Character.toUpperCase(char) to each character produces the same result
                     * Applying the method Character.toLowerCase(char) to each character produces the same result 
               Parameters:
                  aString - The String object to compare this String against
               Returns:
                  true if the argument is not null and it represents an equivalent String ignoring case; 
                  false otherwise
               Throws:
                  WrongClassException - if argument has the wrong class  
               Example:
                  String a abc
                  String b AbC
                  String c ddd
                  File d abc
                  a.equalsIgnoreCase b
                  >>>true
                  a.equalsIgnoreCase c
                  >>>false 
                  a.equalsIgnoreCase d
                  >>>WrongClassException d: class File
            

               String
                  Constructor for the String objects.
               Parameters:
                  objectname 
                  string
                  No "." character is allowed in the objectname string.
               Returns:
                  None
               Example:
                  String a teststring
            

               getClass
                  Returns the runtime class of this Object.
               Parameters:
                 None
               Returns:
                  The Class object that represents the runtime class of this object.
               Example:
                  String b xxx
                  b.getClass
                  >>>class String
            

               hashCode
               Parameters:
                  None 
               Returns 
                  a hash code for this string. The hash code for a String object is computed as
                       s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]         
                  using int arithmetic, where s[i] is the ith character of the string, 
                  n is the length of the string, and ^ indicates exponentiation. 
                  (The hash value of the empty string is zero.)  
               Throws:
                  NotInPathException - if bc not in path
               Example:
                  String a abcdef
                  a.hashCode
                  >>>-1424385949
            

               indexOf
                  Returns the index within this string of the first occurrence of the specified substring, 
                  starting at the specified index. 
                  If no such value exists, then -1 is returned.
                  Simulation of following java behavior:  
                  k >= Math.min(fromIndex, str.length()) && this.startsWith(str, k)
               Parameters:
                  str - the substring to search for.
                  [fromIndex - the index to start the search from.]
               Returns:
                  the index within this string of the first occurrence of the specified substring.
               Throws:
                  IllegalArgumentException - if the parameter cannot be treated as a number
               Examples:
                  String a abc
                  a.indexOf a 
                  >>>0
            

               isAlnum
                  based on POSIX standard character class: alnum
               Parameters:
                  None
               Returns:
                  true if all characters in the String are alphanumeric and there is at least one character, 
                  false otherwise.
               Example:
                  String a a1
                  a.isAlnum
                  >>>true
            

               isAlpha
                  based on POSIX standard character class: alpha
               Parameters:
                  None
               Returns:
                  true if all characters in the String are alphabetic and there is at least one character, 
                  false otherwise.
               Example:
                  String a abc
                  a.isAlpha
                  >>>true
            

               isAscii
                  based on POSIX standard character class: ascii 
               Parameters:
                  None
               Returns:
                  true if all characters in the String are ascii and there is at least one character, 
                  false otherwise.
               Example:
                  String a \E4\F6\FC
                  a.isAscii
                  >>>false
            

               isDigit
                  based on POSIX standard character class: digit
               Parameters:
                  None
               Returns:
                  true if all characters in the String are digits and there is at least one character, 
                  false otherwise.     
               Example:
                  String a 23424
                  a.isDigit
                  >>>true
            

               isEmpty
                  Returns true if, and only if, length is 0.
               Parameters:
                  None
               Returns:
                  true if length is 0, otherwise false     
               Example:
                  String a 
                  a.isEmpty
                  >>>true
            

               isHexDigit
                  based on POSIX standard character class: xdigit
               Parameters:
                  None
               Returns:
                  true if all characters in the String are hexdigits and there is at least one character, 
                  false otherwise.     
               Example:
                  String a a01
                  a.isHexDigit
                  >>>true 
            

               isLowerCase
                  Optimized for german, french, polish, spanish, romanian, czech, slovak, slovenian, 
                  swedish, finnish, danish, scottish gaelic, catalan, hungarian, norwegian and icelandic locale.
               Parameters:
                  None
               Returns:
                  true if all cased characters in the String are lowercase and there is at least one cased character, 
                  false otherwise.     
               Example:
                  String a aBc
                  a.isLowerCase
                  >>>false
            

               isPrintable
                  based on POSIX standard character class: print
               Parameters:
                  None
               Returns:
                  true if all characters in the String are printable and there is at least one character, 
                  false otherwise.
               Example:
                  String a abc
                  a.isPrintable
                  >>>true 
            

               isSpace
                  based on POSIX standard character class: space
               Parameters:
                  None 
               Returns:
                  true if there are only whitespace characters in the String and there is at least one character, 
                  false otherwise.     
               Example:
                  String a "   "
                  a.isSpace
                  >>>true
            

               isTitle
                  This method checks whether all the case-based characters in the string following non-
                  casebased letters are uppercase and all other case-based characters are lowercase.
               Parameters:
                  None
               Returns:
                  It returns true if the String is a titlecased string and there is at least one character, 
                  for example uppercase characters may only follow uncased characters and lowercase characters 
                  only cased ones. Returns false otherwise.
               Example:
                  String a 'This Is String Example...Wow!!!'
                  a.isTitle
                  >>>true
            

               isUpperCase
                  Optimized for german, french, polish, spanish, romanian, czech, slovak, slovenian, 
                  swedish, finnish, danish, scottish gaelic, catalan, hungarian, norwegian and icelandic locale.
               Parameters:
                  None
               Returns:
                  true if all cased characters in the String are uppercase and there is at least one cased character,
                  false otherwise.     
               Example:
                  String a ABC
                  a.isUpperCase
                  >>>true
            

               isVisible
                  based on POSIX standard character class: graph
               Parameters:
                  None
               Returns:
                  true if all characters in the String are visible and there is at least one character, 
                  false otherwise.     
               Example:
                  String a "a c"
                  a.isVisible
                  >>>false
            

               lastIndexOf
                  Returns the index within this String of the last occurrence of the specified substring, 
                  searching backward starting at the specified index. 
                  If no such value exists, then -1 is returned.
               Parameters:
                  str - the substring to search for.
                  [fromIndex - the index to start the search from.]
               Returns:
                  the index within this String of the last occurrence of the specified substring.
               Throws:
                  IllegalArgumentException - if the parameter cannot be treated as a number
               Examples:
                  String a "eacc eadee"
                  a.lastIndexOf " e" 2
                  >>>-1
                  a.lastIndexOf " e" 20
                  >>>4
                  a.lastIndexOf e
                  >>>9
            

               length
                  Returns the length of this string.
               Parameters:
                  None  
               Returns:
                  the length of the sequence of characters.
               Example:
                  String a abc
                  a.length
                  >>>3
            

               lstrip
               Parameters:
                  None
               Returns:
                  It returns a copy of the String in which all chars have been stripped 
                  from the beginning of the string (whitespace characters).     
               Example:
                  String a "   abc    "
                  echo "'$(a.lstrip)'"
                  >>>'abc    '
            

              matches
                 Tells whether or not this String matches the given regular expression.
              Parameters:
                 regex - the regular expression to which this string is to be matched
              Returns:
                 true if, and only if, this String matches the given regular expression,
                 false otherwise.
              Example:
                 String a abc
                 a.matches ^[[:alnum:]]*$
                 >>>true
            

               replaceAll
               Parameters:
                  oldSub
                  newSub
               Returns:
                  Returns a new string resulting from replacing all occurrences
                  of oldSub in this string with newSub.  
               Example:
                  String a abca
                  a.replaceAll a X
                  >>>XbcX
           

               replaceFirst
               Parameters:
                  oldSub
                  newSub
               Returns:
                  Returns a new string resulting from replacing the first occurrence 
                  of oldSub in this string with newSub.  
               Example:
                  String a abca
                  a.replaceFirst a X
                  >>>Xbca 
            

               reverse
               Parameters:
                  None
               Returns:
                  a reversed version of the string 
               Example:
                  String a AbC
                  a.reverse
                  >>>CbA  
            

               rstrip
               Parameters:
                  None
               Returns:
                  It returns a copy of the string in which all chars have been stripped 
                  from the end of the string (whitespace characters).
               Example:
                  String a "   abc    "
                  echo "'$(a.rstrip)'"
                  >>>'   abc'
            

               startsWith
               Parameters:
                  prefix - the prefix string.
                  toffset - where to begin looking in this string. Default: 0
               Returns:
                  true if string starts with parameter string, false otherwise.
               Throws:
                  IllegalArgumentException - if the parameter cannot be treated as a number
               Example:
                  String a abcdef
                  a.startsWith ab
                  >>>true
                  a.startsWith d 3
                  >>>true
            

               substring 
               Parameters:
                  beginIndex - the beginning index, inclusive.
                  [endIndex - the ending index, inclusive. Default: end of string]
               Returns:
                  Returns a new string that is a substring of this string. 
                  The substring begins at the specified beginIndex and extends to 
                  the character at index endIndex - 1. 
                  Thus the length of the substring is endIndex-beginIndex.
               Throws:
                  IllegalArgumentException - if the parameter cannot be treated as a number
                  IndexOutOfBoundsException - if the beginIndex is negative, or endIndex is larger than the length of this String object, 
                                              or beginIndex is larger than endIndex.   
               Example:
                  String a abcdef
                  a.substring 2 4
                  >>>cde
            

               swapCase
               Parameters:
                  None
               Returns:
                  a copy of s, but with lower case letters converted to upper case and vice versa. 
               Example:
                  String a AbC
                  a.swapCase
                  >>>aBc     
            

               title
               Parameters:
                  None
               Returns:
                  Return a titlecased version of the string: words start with uppercase characters, 
                  all remaining cased characters are lowercase.
               Example:
                  String a "AbC...y aber"
                  a.title
                  >>>Abc...Y Aber  
            

               toLowerCase
                  Optimized for german, french, polish, spanish, romanian, czech, slovak, slovenian, 
                  swedish, finnish, danish, scottish gaelic, catalan, hungarian, norwegian and icelandic locale.
               Parameters:
                  None
               Returns:
                  A copy of the string with all cased characters in lower case.
               Example:
                  String a AbC
                  a.toLowerCase
                  >>>abc      
            

               toString
                  This object (which is already a string!) is itself returned.
               Parameters:
                  None
               Returns:
                  the string itself.
               Example:
                  String a abc
                  a.toString
                  >>>abc
            

               toUpperCase
                  Optimized for german, french, polish, spanish, romanian, czech, slovak, slovenian, 
                  swedish, finnish, danish, scottish gaelic, catalan, hungarian, norwegian and icelandic locale.
               Parameters:
                  None
               Returns:
                  A copy of the string with all cased characters in upper case.
               Example:
                  String a abc
                  a.toUpperCase
                  >>>ABC     
            

               trim
               Parameters:
                  None
               Returns:
                  A copy of this string with leading and trailing white space removed, or this 
                  string if it has no leading or trailing white space.     
               Example:
                  String a "   abc"
                  a.toString
                  >>>   abc
                  a.trim
                  >>>abc
            

               zfill
               Parameters:
                  an integer  - The width of the return String
               Returns:
                  Pad a numeric string on the left with zero digits until the given width is reached. 
               Throws:
                  IllegalArgumentException - if the parameter cannot be treated as a number
               Example:
                  String a abc
                  a.zfill 5
                  >>>00abc
            

               String.digits
               Parameters:
                  None
               Returns:
                  The string '0123456789'
               Example
                  String.digits
                  >>>0123456789
               

               String.asciiLetters
               Parameters:
                  None
               Returns:
                  The concatenation of the String.asciiLettersLowerCase and 
                  String.asciiLettersUpperCase. 
                  This value is not locale-dependent.
               Example:
                  String.asciiLetters
                  >>>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ  
               

               String.asciiLettersLowerCase
               Parameters:
                  None
               Returns:
                  The lowercase letters 'abcdefghijklmnopqrstuvwxyz'. 
                  This value is not locale-dependent and will not change.
               Example:
                  String.asciiLettersLowerCase
                  >>>abcdefghijklmnopqrstuvwxyz    
               

               String.asciiLettersUpperCase
               Parameters:
                  None
               Returns:
                  The uppercase letters 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'. 
                  This value is not locale-dependent and will not change.
               Example:
                  String.asciiLettersUpperCase
                  >>>ABCDEFGHIJKLMNOPQRSTUVWXYZ
               

               String.hexDigits
               Parameters:
                  None
               Returns:
                  The string '0123456789abcdefABCDEF' 
               Example:
                  String.hexDigits
                  >>>0123456789abcdefABCDEF 
               

               String.octDigits
               Parameters:
                  None
               Returns:
                  The string '01234567'
               Example:
                  String.octDigits
                  >>>01234567
               
.SH AUTHOR
franka
