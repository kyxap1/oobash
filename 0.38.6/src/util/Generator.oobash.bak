##################################################################
# Author:  andreas.gregor.frank@googlemail.com                                
#     
# License: The MIT License
#
# Copyright (c) <2010> <andreas.gregor.frank@googlemail.com>

#########################
#########################
##                     ##
##      GENERATOR      ## 
##                     ##
#########################
#########################

Class.generator()
{
   if (( $# >= 2 ))
   then
      declare -i argcount=$#
      local UserClass="$1"
      # check for valid class name
      eval local $UserClass=test 2>/dev/null
      if (( $? != 0 ))
      then
         System.err.println
         System.err.println $"Sorry, no valid classname: '"$UserClass"'"
         System.err.println
         return 1
      fi         
      shift
      local args="$@"
      local getters=''
      local attrs=''
      while (($#))
      do
         local attribute="$1"
         declare -i i=0
         for ((i=0; i < ${#attribute}; i++))
         do
            # check for valid attribute name
            eval local $attribute=test 2>/dev/null
            if (( $? != 0 ))
            then
               System.err.println
               System.err.println $"Sorry, no valid attribute name: '"$attribute"'"
               System.err.println
               return 1
            fi             
         done
         attrs="$attrs"" $attribute"
         local getter="get""$(__strUpper ${attribute:0:1})""${attribute:1}"
         getters="$getters"" $getter"
         shift
      done

System.out.println "#############################################################
# Author:  $USER
# Date:    $(date +%Y-%m-%d)
# License: The MIT License
# Copyright (c) <$(date +%Y)> <$USER>
#############################################################

 
# Your \"Starter\" method array for later inheritance actions
declare -a __${UserClass}Methods__=($getters)

# Your \"Starter\" method array:
declare -a __${UserClass}__=(\${__${UserClass}Methods__[@]} \${__ObjectMethods__[@]})

# This is your constructor for the $UserClass class:
# Don't forget: all your objects are immutable:  
# http://en.wikipedia.org/wiki/Immutable_object
$UserClass()
{
   if (( \$# == $argcount ))
   then
      local this=\"\$1\""
      declare -i counter=2
      local arg
      for arg in $args
      do
         System.out.println "      local $arg=\"\$${counter}\""
         counter+=1
      done
System.out.println "      
      if ! __visible \"\$this\"
      then
         System.err.println \$\"Sorry, objectname '\$this' is not valid\"
         return 1
      fi  

      if ! __checkForKeywords \"\$this\"
      then
         System.err.println \$\"Sorry, objectname \$this is a keyword\"
         return 1
      fi 

      local class=\$FUNCNAME
      local pointer=\$(System.currentTimeNanos)  
      declare -i i=0

      for ((i=0; i < \${#this}; i++))
      do
         local char=\"\${this:i:1}\"
         case \$char in
            .) System.err.println \$\"Sorry, no full stop character allowed in objectname\"
               return 1;;
         esac
      done 

      __destructor \"\$this\"

      __alias \"\$this\" \"\$FUNCNAME\"
"
for arg in $args
do
System.out.println "      __attribute $arg \"\$$arg\""        
done
System.out.println "
      return 0
   fi
   local printStream=err
   $UserClass.help \$FUNCNAME
   return 1	
}
__registerClass $UserClass

# Your methods start with two underscores.
# Getters for your attributes: $attrs"
local att
for att in $attrs
do
System.out.println "
__get$(__strUpper ${att:0:1})${att:1}()
{
   if (( \$# == 2 ))
   then
      local this=\"\$1\"
      local key
      for key in \"\${!__OBJECTPOOL__[@]}\"
      do 
         if [[ \"\$this\" == \"\$key\" ]];
         then
            local str=\"\${__OBJECTPOOL__[\"\$this\"]}\"
            declare -i i=0
            for ((i=0; i < \${#str}; i++))
            do
               local char=\"\${str:i:1}\"
               if [[ \$char == \"@\" ]]
               then
                  local j=\$((\$i+1))
                  local pointer=\"\${str:j}\"
               fi
            done              
         fi
      done
      System.out.println \"\${__ATTRIBUTEPOOL__[\${pointer}@${att}]}\" 
      return 0
   fi
   local class=\$2 
   local printStream=err
   \${class}.help \${FUNCNAME:2}
   return 1
}
"
done

System.out.println "
complete -W  \"\$(echo \${__${UserClass}__[@]}) all ${UserClass}\" ${UserClass}.help

# Your ${UserClass} help system:
${UserClass}.help()
{  
   local printStream=\${printStream:-out}  
   if (( \$# == 0 ))
   then
      System.\${printStream}.println \"
                    Usage: ${UserClass}.help all|methodname
                    Available methods:
                    -getClass"
   for att in $attrs
   do
      System.out.println "                    -get$(__strUpper ${att:0:1})${att:1}"
   done
   System.out.println "                    Constructor: 
                    -${UserClass}
      \" 
      return 0
   fi
   while ((\$#))
   do
      local match=\$(Boolean.FALSE)
      case \$1 in
         ${UserClass}|all)
            match=\$(Boolean.TRUE)
            System.\${printStream}.println \"
               ${UserClass}
                  Constructor for the ${UserClass} objects.
               Parameters:
                  objectname" 

   for arg in $args
   do
      echo "                  <$arg>"
   done
   System.out.println "                  No \".\" character is allowed in the objectname string.
               Returns:
                  None
               Example:"
   echo -ne "                  ${UserClass} a "
   for arg in $args
   do
   echo -ne  "<$arg> "
   done
   System.out.println "
            \";;& "
   declare -i count=0
   declare -a values=($(eval echo {2..$argcount}))
   for att in $attrs
   do
      System.out.println "         get$(__strUpper ${att:0:1})${att:1}|all)
            match=\$(Boolean.TRUE)
            System.\${printStream}.println \"
               get$(__strUpper ${att:0:1})${att:1}
                  Returns the value of $att
               Parameters:
                  None
               Returns:
                  The value of $att.
               Example:
                  ${UserClass} b $(eval echo {2..$argcount})
                  b.get$(__strUpper ${att:0:1})${att:1}
                  >>>$(echo ${values[$count]})
            \";;& "
      count+=1
   done
   System.out.println "         getClass|all)
            match=\$(Boolean.TRUE)
            System.\${printStream}.println \"
               getClass
                  Returns the runtime class of this Object.
               Parameters:
                  None
               Returns:
                  The Class object that represents the runtime class of this object.
               Example:
                  ${UserClass} b $(eval echo {2..$argcount})
                  b.getClass
                  >>>class ${UserClass}
            \";;&
         *)   if [[ \$match == \$(Boolean.FALSE) ]]
              then
                 System.\${printStream}.println \"                                  
                       No help found for \$1
                    \"   
              fi
              ;;& 
      esac               
      shift
   done 
}

"      
      return 0       
   fi
   System.err.println
   System.err.println $"   Please enter one class name and the attributes"
   System.err.println $"   Example:" 
   System.err.println $"   Class.generator Person name age city > Person.oobash" 
   System.err.println $"   source Person.oobash" 
   System.err.println $"   Person a john 22 london"
   System.err.println $"   a.getAge"
   System.err.println $"   >>>22" 
   System.err.println $"   a.getClass"
   System.err.println $"   >>>class Person"
   System.err.println $"   a.getName"
   System.err.println $"   >>>john"
   System.err.println $"   a.getCity"
   System.err.println $"   >>>london"
   System.err.println 
   System.err.println $"   If you develop something useful and/or funny, please" 
   System.err.println $"   send it to me and i will publish it on sourceforge."
   System.err.println $"   Happy bashing !"
   System.err.println 
   return 1   
}
__registerFunction Class.generator

