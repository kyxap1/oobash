##################################################################
# Author:  andreas.gregor.frank@googlemail.com                                
#     
# License: The MIT License
#
# Copyright (c) <2010> <andreas.gregor.frank@googlemail.com>

####################
####################
##                ##
##     LEVEL      ## 
##                ##
####################
####################
   

#########################
#                       #
#      CONSTRUCTOR      # 
#                       #
#########################

Level() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   if (( $# == 4 )); then
      local this="$1"
      local level="$2"
      local levelStr="$3"
      local syslogEquivalent="$4"

      if ! __visible "$this"; then
         I18n.err.message "Sorry, objectname '\$this' is not valid"
         return 1
      fi  

      if ! __checkForKeywords "$this"; then
         I18n.err.message "Sorry, objectname '\$this' is a keyword"
         return 1
      fi

      if ! __periodCheck "$this"; then
         I18n.err.message "Sorry, no full stop character allowed in objectname"
         return 1
      fi
     
      local pointer
      if ! pointer=$(System.currentTimeNanos); then
         I18n.err.message "Sorry, could not create object '\$this'"
         return 1
      fi

      local class=$FUNCNAME

      __destructor "$this"

      __alias "$this" "$FUNCNAME"

      __attribute level "$level"
      __attribute levelStr "$levelStr"
      __attribute syslogEquivalent "$syslogEquivalent"
         
      __Keywords__+=("$this")

      return 0
   fi
   __throw "IllegalArgumentException" ": Wrong number of arguments $#"
   return $?
}
__registerClass Level

#####################
#                   #
#      METHODS      # 
#                   #
#####################

__toInt() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   if (( $# == 2 )); then
      local this="$1"
      local key
      for key in "${!__OBJECTPOOL__[@]}"
      do 
         if [[ "$this" == "$key" ]]; then
            local str="${__OBJECTPOOL__["$this"]}"
            declare -i i=0
            for ((i=0; i < ${#str}; i++))
            do
               local char="${str:i:1}"
               if [[ $char == "@" ]]; then
                  local j=$(($i+1))
                  local pointer="${str:j}"
               fi
            done              
         fi
      done
      System.out.println "${__ATTRIBUTEPOOL__[${pointer}@level]}" 
      return 0
   fi
   __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
   return $?
}

__getSyslogEquivalent() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   if (( $# == 2 )); then
      local this="$1"
      local key
      for key in "${!__OBJECTPOOL__[@]}"
      do 
         if [[ "$this" == "$key" ]]; then
            local str="${__OBJECTPOOL__["$this"]}"
            declare -i i=0
            for ((i=0; i < ${#str}; i++))
            do
               local char="${str:i:1}"
               if [[ $char == "@" ]]; then
                  local j=$(($i+1))
                  local pointer="${str:j}"
               fi
            done              
         fi
      done
      System.out.println "${__ATTRIBUTEPOOL__[${pointer}@syslogEquivalent]}" 
      return 0
   fi
   __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
   return $?
}

__isGreaterOrEqual() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   if (( $# == 3 )); then
      this=$1
      class=$2
      argobject=$3
      argclass="$("$argobject".getClass 2>/dev/null)"
      if (( $? == 0 )); then 
         if [[ "$($this.getClass)" != "$argclass" ]]; then
            __throw "WrongClassException" ": Illegal argument: \"${argobject}\": $("$argobject".getClass)"
            return $?
         fi
      else
         __throw "IllegalArgumentException" ": Illegal argument: \"$3\" is no object"
         return $?
      fi      
      if (( $($this.toInt) == $(Math.max $($argobject.toInt) $($this.toInt)) )); then
         Boolean.TRUE
      else
         Boolean.FALSE
      fi
      return 0
   fi
   __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
   return $?
}

#################
#               #
#     HELP      # 
#               #
#################

complete -W  "$(echo ${__Level__[@]}) all Level" Level.help

# Your Level help system:
Level.help() {  
   local printStream=${printStream:-out}  
   if (( $# == 0 )); then
      System.${printStream}.println "
                    Usage: Level.help all|methodname
                    Available methods:
                    -getClass
                    -toInt
                    -toString
                    -getSyslogEquivalent
                    -isGreaterOrEqual
                    -equals
                    Constructor: 
                    -Level
                 " 
      return 0
   fi
   while (($#))
   do
      local match=$(Boolean.FALSE)
      case $1 in
         Level|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               Level
                  Constructor for the Level objects.
               Parameters:
                  objectname 
                  level
                  levelStr
                  syslogEquivalent
                  No "." character is allowed in the objectname string.
               Returns:
                  None
               Throws:
                  IllegalArgumentException - if number of arguments != 4
               Example:
                  Level a <level> <levelStr> <syslogEquivalent> 
            ";;& 
      equals|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "         
               equals
                  Two priorities are equal if their level fields are equal.
               Parameters:
                  anObject - The object to be compared with
               Returns:
                  true if and only if the objects have the same level field; false otherwise
               Throws:
                  IllegalArgumentException - if number of arguments != 1
               Example:
                  Level a 1000 "FATAL" 0
                  Level b 1000 "MYLEVEL" 0
                  a.equals b
                  >>>true
            ";;&                   
      toInt|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               toInt
                  Returns the value of level
               Parameters:
                  None
               Returns:
                  The value of level.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Level b 2 3 4
                  b.getLevel 
                  >>>2 
            ";;& 
      toString|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               toString
                  Returns the string representation of this level.
               Parameters:
                  None
               Returns:
                  The value of levelStr.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Level b 2 3 4
                  b.getLevelStr 
                  >>>3 
            ";;& 
      getSyslogEquivalent|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               getSyslogEquivalent
                  Returns the value of syslogEquivalent
               Parameters:
                  None
               Returns:
                  The value of syslogEquivalent.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Level b 2 3 4
                  b.getSyslogEquivalent  
                  >>>4
            ";;& 
      isGreaterOrEqual|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               isGreaterOrEqual       
               Parameters:
                  anObject - The object to be compared with
               Returns:
                  Returns true if this level has a higher or equal level 
                  than the level passed as argument, false otherwise.
               Throws:
                  IllegalArgumentException - if number of arguments != 1
                                           - if argument is no object                         
                  WrongClassException - if argument has the wrong class
               Example:
                  Level a 1000 "FATAL" 0
                  Level b 1000 "MYLEVEL" 0
                  a.equals b
                  >>>true
            ";;&                  
      getClass|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               getClass
                  Returns the runtime class of this Object.
               Parameters:
                  None
               Returns:
                  The Class object that represents the runtime class of this object.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Level b 2 3 4
                  b.getClass
                  >>>class Level
            ";;&
         *)   if [[ $match == $(Boolean.FALSE) ]]; then
                 System.${printStream}.println "                                  
                       No help found for $1
                    "   
              fi
              ;;& 
      esac               
      shift
   done 
}
