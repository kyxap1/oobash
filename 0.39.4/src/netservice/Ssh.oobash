#############################################################
# Author:  andreas.gregor.frank@googlemail.com
# Date:    2012-05-29
# License: The MIT License
# Copyright (c) <2012> <andreas.gregor.frank@googlemail.com>
#############################################################

#########################
# constructor  function #
#########################
Ssh() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   if (( $# == 3 )) || (( $# == 4 )); then
      local this="$1"
      local name="$2"
      local user="$3"
      # Default port for ssh: 22
      local port="${4:-22}"
      
      if ! __visible "$this"; then
         __throw "IllegalArgumentException" ": Objectname '$this' is not valid"
         returnValue=$?
         __stackOrHelp "${FUNCNAME}" "${FUNCNAME}"
         return $returnValue
      fi

      if ! __checkForKeywords "$this"; then
         __throw "IllegalArgumentException" ": Objectname '$this' is a keyword"
         returnValue=$?
         __stackOrHelp "${FUNCNAME}" "${FUNCNAME}"
         return $returnValue
      fi

      if ! __periodCheck "$this"; then
         __throw "IllegalArgumentException" ": No full stop character allowed in objectname"
         returnValue=$?
         __stackOrHelp "${FUNCNAME}" "${FUNCNAME}"
         return $returnValue
      fi
      
      if command -v ssh >/dev/null 2>&1; then
         # Test for passwordless ssh login
         ssh -p "${port}" -q -o "BatchMode yes" "${user}@${name}" : 1>/dev/null 2>&1
         returnValue=$?
         if (( $returnValue != 0 )); then
            __throw "AuthException" ": no passwordless authentication possible with SshHost '${name}' and user '${user}'"
            returnValue=$?
            __stackOrHelp "${FUNCNAME}" "${FUNCNAME}"
            return $returnValue 
         fi
      else
         __throw "NotInPathException" ": ssh not in path"
         returnValue=$?
         __stackOrHelp "${FUNCNAME}" "${FUNCNAME}"
         return $returnValue 
      fi
 
      local pointer="$(__getPointer)"

      local class=$FUNCNAME

      __destructor "$this"

      __alias "$this" "$FUNCNAME"
      
      __attribute name "$name"
      __attribute user "$user"
      __attribute port "$port"

   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $#"
      returnValue=$?
      __stackOrHelp "${FUNCNAME}" "${FUNCNAME}"
   fi
   return $returnValue
}
__registerClass SshHost


######################
# getter function(s) #
######################

__getSshHost() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 2 )); then
      local this="$1"
      local key
      for key in "${!__OBJECTPOOL__[@]}"
      do 
         if [[ "$this" == "$key" ]]; then
            local str="${__OBJECTPOOL__["$this"]}"
            declare -i i=0
            for ((i=0; i < ${#str}; i++))
            do
               local char="${str:i:1}"
               if [[ $char == "@" ]]; then
                  local j=$(($i+1))
                  local pointer="${str:j}"
               fi
            done              
         fi
      done
      System.out.println "${__ATTRIBUTEPOOL__[${pointer}@name]}" 
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __stackOrHelp "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__getSshUser() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 2 )); then
      local this="$1"
      local key
      for key in "${!__OBJECTPOOL__[@]}"
      do 
         if [[ "$this" == "$key" ]]; then
            local str="${__OBJECTPOOL__["$this"]}"
            declare -i i=0
            for ((i=0; i < ${#str}; i++))
            do
               local char="${str:i:1}"
               if [[ $char == "@" ]]; then
                  local j=$(($i+1))
                  local pointer="${str:j}"
               fi
            done              
         fi
      done
      System.out.println "${__ATTRIBUTEPOOL__[${pointer}@user]}" 
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __stackOrHelp "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__getSshPort() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 2 )); then
      local this="$1"
      local key
      for key in "${!__OBJECTPOOL__[@]}"
      do 
         if [[ "$this" == "$key" ]]; then
            local str="${__OBJECTPOOL__["$this"]}"
            declare -i i=0
            for ((i=0; i < ${#str}; i++))
            do
               local char="${str:i:1}"
               if [[ $char == "@" ]]; then
                  local j=$(($i+1))
                  local pointer="${str:j}"
               fi
            done              
         fi
      done
      System.out.println "${__ATTRIBUTEPOOL__[${pointer}@port]}" 
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __stackOrHelp "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__command() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 3 )); then
      local this="$1"
      local machine="$("$this".getSshHost)"
      local user="$("$this".getSshUser)"
      local port="$("$this".getSshPort)"
      local command="$3"
      if command -v ssh >/dev/null 2>&1; then
         local retValue
         ssh -p "${port}" -q -o "BatchMode yes" "${user}@${machine}" "${command} 2>/dev/null"
         retValue=$?
         if (( $retValue != 0 )) && [[ -n "$PS1" ]]; then
            ssh -t -p "${port}" -q -o "BatchMode yes" "${user}@${machine}" "${command}"
         fi
      else
         __throw "NotInPathException" ": ssh not in path"
         returnValue=$?
         __stackOrHelp "${class}" "${FUNCNAME:2}"
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __stackOrHelp "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__vimEdit() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   local class="$2"
   declare -i returnValue=0
   if (( $# == 3 )); then
      local this="$1"
      local machine="$("$this".getSshHost)"
      local user="$("$this".getSshUser)"
      local port="$("$this".getSshPort)"
      local file="$3"
      if command -v vim >/dev/null 2>&1; then
         if command -v scp >/dev/null 2>&1; then
            vim scp://"${user}"@"${machine}":"${port}"/"${file}"
            returnValue=$?
         else
            __throw "NotInPathException" ": scp not in path"
            returnValue=$?
            __stackOrHelp "${class}" "${FUNCNAME:2}"
         fi
      else
         __throw "NotInPathException" ": vim not in path"
         returnValue=$?
         __stackOrHelp "${class}" "${FUNCNAME:2}"
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __stackOrHelp "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__connect() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 2 )); then
      local this="$1"
      local machine="$("$this".getSshHost)"
      local user="$("$this".getSshUser)"
      local port="$("$this".getSshPort)"
      if command -v ssh >/dev/null 2>&1; then
         ssh -p "${port}" "${user}@${machine}"
         returnValue=$?
      else
         __throw "NotInPathException" ": ssh not in path"
         returnValue=$?
         __stackOrHelp "${class}" "${FUNCNAME:2}"
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __stackOrHelp "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

complete -W  "$(echo ${__SshHost__[@]}) all SshHost" SshHost.help

#################
# help function #
#################
Ssh.help() {
   local printStream=${printStream:-out}  
   if (( $# == 0 )); then
      System.${printStream}.println "
                    Usage: Ssh.help all|methodname
                    Available methods:
                    -getClass -toString -equals
                    -hashCode -getSshHost -getSshUser
                    -getSshPort -command
                    -vimEdit -connect
                    Constructor: 
                    -Ssh
      " 
      return 0
   fi
   while (($#))
   do
      local match=$(Boolean.FALSE)
      case $1 in
         Ssh|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               Ssh
                  Constructor for the Ssh objects, checks if passwordless auth
                  is possible with name and user.
               Parameters:
                  objectname
                  <hostname>
                  <user>
                  [<port>] default: 22
                  No "." character is allowed in the objectname string.
               Returns:
                  None
               Throws:
                  IllegalArgumentException - if number of arguments != 3 AND != 4
                                           - if objectname is not valid
                                           - if objectname is a keyword
                                           - if objectname contains full stop character
                  AuthException - if passwordless auth is not possible
               Example:
                  Ssh a <hostname> <user> [<port>]
            ";;& 
         getSshHost|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               getSshHost
                  Returns the value of name
               Parameters:
                  None
               Returns:
                  The value of name.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  SshHost mymachine mymachine.mydom.org mysshaccount
                  mymachine.getSshHostName
                  >>>mymachine.mydom.org
            ";;& 
         getSshUser|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               getSshUser
                  Returns the value of user (ssh-user)
               Parameters:
                  None
               Returns:
                  The value of user.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Ssh mymachine mymachine.mydom.org mysshaccount
                  mymachine.getSshHostUser
                  >>>mysshaccount
            ";;& 
         getSshPort|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               getSshPort
                  Returns the value of port (ssh-port)
               Parameters:
                  None
               Returns:
                  The value of port.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Ssh mymachine mymachine.mydom.org mysshaccount
                  mymachine.getSshHostPort
                  >>>22
                  Ssh mymachine mymachine.mydom.org mysshaccount 888
                  mymachine.getSshHostPort
                  >>>888
            ";;&
         command|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               command
                  Calls command on remote host 
               Parameters:
                  command
               Returns:
                  command result
               Throws:
                  IllegalArgumentException - if number of arguments != 1
               Example:
                  Ssh mymachine mymachine.mydom.org mysshaccount
                  mymachine.command \"date\"
                  >>>Fr 1. Jun 14:35:36 CEST 2012
            ";;&
         vimEdit|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               vimEdit
                  Opens a remote file with the local vim
               Parameters:
                  None
               Returns:
                  None
               Throws:
                  IllegalArgumentException - if number of arguments != 1
               Example:
                  Ssh mymachine mymachine.mydom.org mysshaccount
                  mymachine.vimEdit /etc/passwd
            ";;&
         connect|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               connect
                  Opens a ssh shell on remote host
               Parameters:
                  None
               Returns:
                  None.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Ssh mymachine mymachine.mydom.org mysshaccount
                  mymachine.connect
            ";;&
         getClass|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               getClass
                  Returns the runtime class of this Object.
               Parameters:
                  None
               Returns:
                  The Class object that represents the runtime class of this object.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Ssh b 1 2 3
                  b.getClass
                  >>>class Ssh
            ";;&
         toString|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               toString
                  Returns a String object representing this SshHost object in sorted order. 
               Parameters:
                  None
               Throws:
                  NotInPathException - if sort not in path
                                     - if tr not in path
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Ssh b 1 2 3
                  b.toString
                  >>><name>|<port>|<user>
            ";;&
         hashCode|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               hashCode
                  Returns a hash code for this SshHost object.
               Parameters:
                  None
               Returns:
                  a hash code for this SshHost.
               Throws:
                  NotInPathException - if bc not in path
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Ssh b 1 2 3
                  b.hashCode
            ";;&
         equals|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               equals
                  Returns true if and only if the argument is a SshHost object that 
                  represents the same SshHost value as this object. 
               Parameters:
                  anObject - The object to compare this SshHost against
               Returns:
                  true if the SshHost objects represent the same value; false otherwise.
               Throws:
                  IllegalArgumentException - if number of arguments != 1
                                           - if arguent is no object
               Example:
                  Ssh b 1 2 3
                  Ssh c 1 2 3
                  a.equals b
                  >>>true
            ";;&
         *)   if [[ $match == $(Boolean.FALSE) ]]; then
                 System.${printStream}.println "                                  
                       No help found for $1
                    "   
              fi
              ;;& 
      esac               
      shift
   done 
}
