#############################################################
# Author:  andreas.gregor.frank@googlemail.com
# Date:    2012-05-29
# License: The MIT License
# Copyright (c) <2012> <andreas.gregor.frank@googlemail.com>
#############################################################

#########################
# constructor  function #
#########################
SshHost() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   if (( $# == 3 )) || (( $# == 4 )); then
      local this="$1"
      local name="$2"
      local user="$3"
      # Default port for ssh: 22
      local port="${4:-22}"
      
      if ! __visible "$this"; then
         __throw "IllegalArgumentException" ": Objectname '$this' is not valid"
         returnValue=$?
         __stackOrHelp "${FUNCNAME}" "${FUNCNAME}"
         return $returnValue
      fi

      if ! __checkForKeywords "$this"; then
         __throw "IllegalArgumentException" ": Objectname '$this' is a keyword"
         returnValue=$?
         __stackOrHelp "${FUNCNAME}" "${FUNCNAME}"
         return $returnValue
      fi

      if ! __periodCheck "$this"; then
         __throw "IllegalArgumentException" ": No full stop character allowed in objectname"
         returnValue=$?
         __stackOrHelp "${FUNCNAME}" "${FUNCNAME}"
         return $returnValue
      fi
      
      if command -v ssh >/dev/null 2>&1; then
         # Test for passwordless ssh login
         ssh -p "${port}" -q -o "BatchMode yes" "${user}@${name}" : 1>/dev/null 2>&1
         returnValue=$?
         if (( $returnValue != 0 )); then
            __throw "AuthException" ": no passwordless authentication possible with SshHost '${name}' and user '${user}'"
            returnValue=$?
            __stackOrHelp "${FUNCNAME}" "${FUNCNAME}"
            return $returnValue 
         fi
      else
         __throw "NotInPathException" ": ssh not in path"
         returnValue=$?
         __stackOrHelp "${FUNCNAME}" "${FUNCNAME}"
         return $returnValue 
      fi
 
      local pointer="$(__getPointer)"

      local class=$FUNCNAME

      __destructor "$this"

      __alias "$this" "$FUNCNAME"
      
      __attribute name "$name"
      __attribute user "$user"
      __attribute port "$port"

   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $#"
      returnValue=$?
      __stackOrHelp "${FUNCNAME}" "${FUNCNAME}"
   fi
   return $returnValue
}
__registerClass SshHost


######################
# getter function(s) #
######################

__getSshHost() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 2 )); then
      local this="$1"
      local key
      for key in "${!__OBJECTPOOL__[@]}"
      do 
         if [[ "$this" == "$key" ]]; then
            local str="${__OBJECTPOOL__["$this"]}"
            declare -i i=0
            for ((i=0; i < ${#str}; i++))
            do
               local char="${str:i:1}"
               if [[ $char == "@" ]]; then
                  local j=$(($i+1))
                  local pointer="${str:j}"
               fi
            done              
         fi
      done
      System.out.println "${__ATTRIBUTEPOOL__[${pointer}@name]}" 
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __stackOrHelp "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__getSshUser() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 2 )); then
      local this="$1"
      local key
      for key in "${!__OBJECTPOOL__[@]}"
      do 
         if [[ "$this" == "$key" ]]; then
            local str="${__OBJECTPOOL__["$this"]}"
            declare -i i=0
            for ((i=0; i < ${#str}; i++))
            do
               local char="${str:i:1}"
               if [[ $char == "@" ]]; then
                  local j=$(($i+1))
                  local pointer="${str:j}"
               fi
            done              
         fi
      done
      System.out.println "${__ATTRIBUTEPOOL__[${pointer}@user]}" 
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __stackOrHelp "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__getSshPort() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 2 )); then
      local this="$1"
      local key
      for key in "${!__OBJECTPOOL__[@]}"
      do 
         if [[ "$this" == "$key" ]]; then
            local str="${__OBJECTPOOL__["$this"]}"
            declare -i i=0
            for ((i=0; i < ${#str}; i++))
            do
               local char="${str:i:1}"
               if [[ $char == "@" ]]; then
                  local j=$(($i+1))
                  local pointer="${str:j}"
               fi
            done              
         fi
      done
      System.out.println "${__ATTRIBUTEPOOL__[${pointer}@port]}" 
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __stackOrHelp "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__command() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 3 )); then
      local this="$1"
      local machine="$("$this".getSshHost)"
      local user="$("$this".getSshUser)"
      local port="$("$this".getSshPort)"
      local command="$3"
      if command -v ssh >/dev/null 2>&1; then
         ssh -p "${port}" -q -o "BatchMode yes" "${user}@${machine}" "${command} 2>/dev/null"
         returnValue=$?
         # if not used in script let's try a pseudo-tty allocation
         # --> may not be used in scripts !
         if (( $returnValue != 0 )) && [[ -n "$PS1" ]]; then
            ssh -t -p "${port}" -q -o "BatchMode yes" "${user}@${machine}" "${command}"
         fi
      else
         __throw "NotInPathException" ": ssh not in path"
         returnValue=$?
         __stackOrHelp "${class}" "${FUNCNAME:2}"
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __stackOrHelp "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

#Run cmds over ssh, without escaping quotes
#ssh host -l user $(<cmd.txt)
__copy() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 4 )) || (( $# == 5 )); then
      local this="$1"
      local argobject="$4"
      local argclass
      argclass="$("${argobject}".getClass 2>/dev/null)"
      if (( $? == 0 )); then
         if [[ "$("$this".getClass)" == "$argclass" ]]; then
            # source
            local machine="$("$this".getSshHost)"
            local user="$("$this".getSshUser)"
            declare -i port="$("$this".getSshPort)"
            local file="$3"
            # target 
            local targetMachine="$("$argobject".getSshHost)"
            local targetUser="$("$argobject".getSshUser)"
            declare -i targetPort="$("$argobject".getSshPort)"
            
            local bool="$(Boolean.TRUE)"
            local targetFile="${5:-"$(__dirname "$file")"}"
           
            cmd1="cd -- \"$(__dirname "$file")\" 2>/dev/null && tar -cf - \"$(__basename "$file")\" 2>/dev/null"
            cmd2="cd -- \"$targetFile\" 2>/dev/null && tar -xf - 2>/dev/null"
            if command -v ssh >/dev/null 2>&1; then
               echo "ssh -p "${port}" -q -o "BatchMode yes" "${user}"@"${machine}"  "$(echo $cmd1)" | ssh -p "${targetPort}" "${targetUser}"@"${targetMachine}" "$(echo $cmd2)""
               ssh -p "${port}" -q -o "BatchMode yes" "${user}"@"${machine}"  "$(echo $cmd1)" | ssh -p "${targetPort}" -q -o "BatchMode yes" "${targetUser}"@"${targetMachine}" "$(echo $cmd2)"
            else
               __throw "NotInPathException" ": ssh not in path"
               returnValue=$?
               __stackOrHelp "${class}" "${FUNCNAME:2}"
               return $returnValue
            fi

            for status in ${PIPESTATUS[@]}; do
               if (( "$status" != 0 )); then
                  bool="$(Boolean.FALSE)"
                  break
               fi
            done
            
            if [[ "$(Boolean.parseBoolean "$bool")" == "$(Boolean.TRUE)" ]]; then
               Boolean.TRUE
            else
               Boolean.FALSE
            fi
         else
            __throw "WrongClassException" ": Illegal argument: \"${argobject}\": $("$argobject".getClass)"
            returnValue=$?
            __stackOrHelp "$2" "${FUNCNAME:2}"
         fi
      else
         __throw "IllegalArgumentException" ": Illegal argument: \"${argobject}\" is no object"
         returnValue=$?
         __stackOrHelp "$2" "${FUNCNAME:2}" 
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __stackOrHelp "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

# diff two files on different machines
# diff <(ssh -n machine1 cat /tmp/test1) <(ssh -n machine2 cat /tmp/test2)
# Bash Process Substitution
__diff() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 4 )) || (( $# == 5 )); then
      local this="$1"
      local argobject="$4"
      local argclass
      argclass="$("${argobject}".getClass 2>/dev/null)"
      if (( $? == 0 )); then
         if [[ "$("$this".getClass)" == "$argclass" ]]; then
            # start
            local machine="$("$this".getSshHost)"
            local user="$("$this".getSshUser)"
            declare -i port="$("$this".getSshPort)"
            local file="$3"
            # target 
            local targetMachine="$("$argobject".getSshHost)"
            local targetUser="$("$argobject".getSshUser)"
            declare -i targetPort="$("$argobject".getSshPort)"
            local targetFile="${5:-"$file"}"

            if command -v ssh >/dev/null 2>&1; then
               diff <(ssh -n -p "${port}" -q -o "BatchMode yes" "${user}"@"${machine}" "(<$file)") <(ssh -n -p "${targetPort}" -q -o "BatchMode yes" "${targetUser}"@"${targetMachine}" "(<$targetFile)")
            else
               __throw "NotInPathException" ": ssh not in path"
               returnValue=$?
               __stackOrHelp "${class}" "${FUNCNAME:2}"
            fi
         else
            __throw "WrongClassException" ": Illegal argument: \"${argobject}\": $("$argobject".getClass)"
            returnValue=$?
            __stackOrHelp "$2" "${FUNCNAME:2}"
         fi
      else
         __throw "IllegalArgumentException" ": Illegal argument: \"${argobject}\" is no object"
         returnValue=$?
         __stackOrHelp "$2" "${FUNCNAME:2}" 
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __stackOrHelp "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

###############################
# Interactive admin functions #
###############################

# only available if bash is interactive --> may not be used in scripts !
if [[ -n "$PS1" ]]; then
   __vimEdit() {
      __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
      local class="$2"
      declare -i returnValue=0
      if (( $# == 3 )); then
         local this="$1"
         local machine="$("$this".getSshHost)"
         local user="$("$this".getSshUser)"
         local port="$("$this".getSshPort)"
         local file="$3"
         if command -v vim >/dev/null 2>&1; then
            if command -v scp >/dev/null 2>&1; then
               vim scp://"${user}"@"${machine}":"${port}"/"${file}"
               returnValue=$?
            else
               __throw "NotInPathException" ": scp not in path"
               returnValue=$?
               __stackOrHelp "${class}" "${FUNCNAME:2}"
            fi
         else
            __throw "NotInPathException" ": vim not in path"
            returnValue=$?
            __stackOrHelp "${class}" "${FUNCNAME:2}"
         fi
      else
         __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
         returnValue=$?
         __stackOrHelp "${class}" "${FUNCNAME:2}"
      fi
      return $returnValue
   }

   __connect() {
      __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
      declare -i returnValue=0
      local class="$2"
      if (( $# == 2 )); then
         local this="$1"
         local machine="$("$this".getSshHost)"
         local user="$("$this".getSshUser)"
         local port="$("$this".getSshPort)"
         if command -v ssh >/dev/null 2>&1; then 
            ssh -p "${port}" "${user}@${machine}"
            returnValue=$?
         else
            __throw "NotInPathException" ": ssh not in path"
            returnValue=$?
            __stackOrHelp "${class}" "${FUNCNAME:2}"
         fi
      else
         __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
         returnValue=$?
         __stackOrHelp "${class}" "${FUNCNAME:2}"
      fi
      return $returnValue
   }
fi

complete -W  "$(echo ${__SshHost__[@]}) all SshHost" SshHost.help

#################
# help function #
#################
SshHost.help() {  
   local printStream=${printStream:-out}  
   if (( $# == 0 )); then
      System.${printStream}.println "
                    Usage: SshHost.help all|methodname
                    Available methods:
                    -getClass
                    -toString
                    -equals
                    -hashCode
                    -getSshHost
                    -getSshUser
                    -getSshPort
                    -command
                    -copy
                    -diff
                    -vimEdit
                    -connect
                    Constructor: 
                    -SshHost
      " 
      return 0
   fi
   while (($#))
   do
      local match=$(Boolean.FALSE)
      case $1 in
         SshHost|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               SshHost
                  Constructor for the SshHost objects, checks if passwordless auth
                  is possible with name and user.
               Parameters:
                  objectname
                  <name>
                  <user>
                  [<port>] default: 22
                  No "." character is allowed in the objectname string.
               Returns:
                  None
               Throws:
                  IllegalArgumentException - if number of arguments != 3 AND != 4
                  AuthException - if passwordless auth is not possible
               Example:
                  SshHost a <name> <user> [<port>] 
            ";;& 
         getSshHost|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               getSshHost
                  Returns the value of name
               Parameters:
                  None
               Returns:
                  The value of name.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  SshHost mymachine mymachine.mydom.org mysshaccount
                  b.getSshHostName
                  >>>mymachine.mydom.org
            ";;& 
         getSshUser|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               getSshUser
                  Returns the value of user (ssh-user)
               Parameters:
                  None
               Returns:
                  The value of user.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  SshHost mymachine mymachine.mydom.org mysshaccount
                  b.getSshHostUser
                  >>>mysshaccount
            ";;& 
         getSshPort|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               getSshPort
                  Returns the value of port (ssh-port)
               Parameters:
                  None
               Returns:
                  The value of port.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  SshHost mymachine mymachine.mydom.org mysshaccount
                  b.getSshHostPort
                  >>>22
                  SshHost mymachine mymachine.mydom.org mysshaccount 888
                  b.getSshHostPort
                  >>>888
            ";;& 
         getClass|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               getClass
                  Returns the runtime class of this Object.
               Parameters:
                  None
               Returns:
                  The Class object that represents the runtime class of this object.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  SshHost b 1 2 3
                  b.getClass
                  >>>class SshHost
            ";;&
         toString|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               toString
                  Returns a String object representing this SshHost object in sorted order. 
               Parameters:
                  None
               Throws:
                  NotInPathException - if sort not in path
                                     - if tr not in path
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  SshHost b 1 2 3
                  b.toString
                  >>><name>|<port>|<user>
            ";;&
         hashCode|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               hashCode
                  Returns a hash code for this SshHost object.
               Parameters:
                  None
               Returns:
                  a hash code for this SshHost.
               Throws:
                  NotInPathException - if bc not in path
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  SshHost b 1 2 3
                  b.hashCode
            ";;&
         equals|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               equals
                  Returns true if and only if the argument is a SshHost object that 
                  represents the same SshHost value as this object. 
               Parameters:
                  anObject - The object to compare this SshHost against
               Returns:
                  true if the SshHost objects represent the same value; false otherwise.
               Throws:
                  IllegalArgumentException - if number of arguments != 1
                                           - if arguent is no object
               Example:
                  SshHost b 1 2 3
                  SshHost c 1 2 3
                  a.equals b
                  >>>true
            ";;&
         *)   if [[ $match == $(Boolean.FALSE) ]]; then
                 System.${printStream}.println "                                  
                       No help found for $1
                    "   
              fi
              ;;& 
      esac               
      shift
   done 
}
