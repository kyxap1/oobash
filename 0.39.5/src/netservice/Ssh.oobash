#############################################################
# Author:  andreas.gregor.frank@googlemail.com
# Date:    2012-05-29
# License: The MIT License
# Copyright (c) <2012> <andreas.gregor.frank@googlemail.com>
#############################################################

#########################
# constructor  function #
#########################
Ssh() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   if (( $# == 3 )) || (( $# == 4 )); then
      local this="$1"
      local name="$2"
      local user="$3"
      # Default port for ssh: 22
      local port="${4:-22}"
      
      if ! __visible "$this"; then
         __throw "IllegalArgumentException" ": Objectname '$this' is not valid"
         returnValue=$?
         __stackOrHelp "${FUNCNAME}" "${FUNCNAME}"
         return $returnValue
      fi

      if ! __checkForKeywords "$this"; then
         __throw "IllegalArgumentException" ": Objectname '$this' is a keyword"
         returnValue=$?
         __stackOrHelp "${FUNCNAME}" "${FUNCNAME}"
         return $returnValue
      fi

      if ! __periodCheck "$this"; then
         __throw "IllegalArgumentException" ": No full stop character allowed in objectname"
         returnValue=$?
         __stackOrHelp "${FUNCNAME}" "${FUNCNAME}"
         return $returnValue
      fi
      
      if command -v ssh >/dev/null 2>&1; then
         # Test for passwordless ssh login
         ssh -p "${port}" -q -o "BatchMode yes" "${user}@${name}" : 1>/dev/null 2>&1
         returnValue=$?
         if (( $returnValue != 0 )); then
            __throw "AuthException" ": no passwordless authentication possible with SshHost '${name}' and user '${user}'"
            returnValue=$?
            __stackOrHelp "${FUNCNAME}" "${FUNCNAME}"
            return $returnValue 
         fi
      else
         __throw "NotInPathException" ": ssh not in path"
         returnValue=$?
         __stackOrHelp "${FUNCNAME}" "${FUNCNAME}"
         return $returnValue 
      fi
 
      local pointer="$(__getPointer)"

      local class=$FUNCNAME

      __destructor "$this"

      __alias "$this" "$FUNCNAME"
      
      __attribute name "$name"
      __attribute user "$user"
      __attribute port "$port"

   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $#"
      returnValue=$?
      __stackOrHelp "${FUNCNAME}" "${FUNCNAME}"
   fi
   return $returnValue
}
__registerClass Ssh


######################
# getter function(s) #
######################

__getSshHost() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 2 )); then
      local this="$1"
      local key
      for key in "${!__OBJECTPOOL__[@]}"
      do 
         if [[ "$this" == "$key" ]]; then
            local str="${__OBJECTPOOL__["$this"]}"
            declare -i i=0
            for ((i=0; i < ${#str}; i++))
            do
               local char="${str:i:1}"
               if [[ $char == "@" ]]; then
                  local j=$(($i+1))
                  local pointer="${str:j}"
               fi
            done              
         fi
      done
      System.out.println "${__ATTRIBUTEPOOL__[${pointer}@name]}" 
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __stackOrHelp "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__getSshUser() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 2 )); then
      local this="$1"
      local key
      for key in "${!__OBJECTPOOL__[@]}"
      do 
         if [[ "$this" == "$key" ]]; then
            local str="${__OBJECTPOOL__["$this"]}"
            declare -i i=0
            for ((i=0; i < ${#str}; i++))
            do
               local char="${str:i:1}"
               if [[ $char == "@" ]]; then
                  local j=$(($i+1))
                  local pointer="${str:j}"
               fi
            done              
         fi
      done
      System.out.println "${__ATTRIBUTEPOOL__[${pointer}@user]}" 
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __stackOrHelp "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__getSshPort() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 2 )); then
      local this="$1"
      local key
      for key in "${!__OBJECTPOOL__[@]}"
      do 
         if [[ "$this" == "$key" ]]; then
            local str="${__OBJECTPOOL__["$this"]}"
            declare -i i=0
            for ((i=0; i < ${#str}; i++))
            do
               local char="${str:i:1}"
               if [[ $char == "@" ]]; then
                  local j=$(($i+1))
                  local pointer="${str:j}"
               fi
            done              
         fi
      done
      System.out.println "${__ATTRIBUTEPOOL__[${pointer}@port]}" 
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __stackOrHelp "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__command() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 3 )); then
      local this="$1"
      local machine="$("$this".getSshHost)"
      local user="$("$this".getSshUser)"
      local port="$("$this".getSshPort)"
      local command="$3"
      if command -v ssh >/dev/null 2>&1; then
         local returnValue
         ssh -p "${port}" -q -o "BatchMode yes" "${user}@${machine}" "${command} 2>/dev/null"
         retValue=$?
         if (( $retValue != 0 )) && [[ -n "$PS1" ]]; then
            ssh -t -p "${port}" -q -o "BatchMode yes" "${user}@${machine}" "${command}"
         fi
      else
         __throw "NotInPathException" ": ssh not in path"
         returnValue=$?
         __stackOrHelp "${class}" "${FUNCNAME:2}"
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __stackOrHelp "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__vimEdit() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   local class="$2"
   declare -i returnValue=0
   if (( $# == 3 )); then
      local this="$1"
      local machine="$("$this".getSshHost)"
      local user="$("$this".getSshUser)"
      local port="$("$this".getSshPort)"
      local file="$3"
      if command -v vim >/dev/null 2>&1; then
         if command -v scp >/dev/null 2>&1; then
            vim scp://"${user}"@"${machine}":"${port}"/"${file}"
            returnValue=$?
         else
            __throw "NotInPathException" ": scp not in path"
            returnValue=$?
            __stackOrHelp "${class}" "${FUNCNAME:2}"
         fi
      else
         __throw "NotInPathException" ": vim not in path"
         returnValue=$?
         __stackOrHelp "${class}" "${FUNCNAME:2}"
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __stackOrHelp "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__connect() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 2 )); then
      local this="$1"
      local machine="$("$this".getSshHost)"
      local user="$("$this".getSshUser)"
      local port="$("$this".getSshPort)"
      if command -v ssh >/dev/null 2>&1; then
         ssh -p "${port}" "${user}@${machine}"
         returnValue=$?
      else
         __throw "NotInPathException" ": ssh not in path"
         returnValue=$?
         __stackOrHelp "${class}" "${FUNCNAME:2}"
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __stackOrHelp "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

#Run cmds over ssh, without escaping quotes
#ssh host -l user $(<cmd.txt)
__copy() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 4 )) || (( $# == 5 )); then
      local this="$1"
      local argobject="$4"
      local argclass
      argclass="$("${argobject}".getClass 2>/dev/null)"
      if (( $? == 0 )); then
         if [[ "$("$this".getClass)" == "$argclass" ]]; then
            # source
            local machine="$("$this".getSshHost)"
            local user="$("$this".getSshUser)"
            declare -i port="$("$this".getSshPort)"
            local file="$3"
            # target 
            local targetMachine="$("$argobject".getSshHost)"
            local targetUser="$("$argobject".getSshUser)"
            declare -i targetPort="$("$argobject".getSshPort)"
            
            local bool="$(Boolean.TRUE)"
            local targetFile="${5:-"$(__dirname "$file")"}"
           
            cmd1="cd -- \"$(dirname "$file")\" 2>/dev/null && tar -cf - \"$(basename "$file")\" 2>/dev/null"
            cmd2="cd -- \"$targetFile\" 2>/dev/null && tar -xf - 2>/dev/null"
            if command -v ssh >/dev/null 2>&1; then
               ssh -p "${port}" -q -o "BatchMode yes" "${user}"@"${machine}"  "$(echo $cmd1)" | ssh -p "${targetPort}" -q -o "BatchMode yes" "${targetUser}"@"${targetMachine}" "$(echo $cmd2)"
            else
               __throw "NotInPathException" ": ssh not in path"
               returnValue=$?
               __stackOrHelp "${class}" "${FUNCNAME:2}"
               return $returnValue
            fi

            for status in ${PIPESTATUS[@]}; do
               if (( "$status" != 0 )); then
                  bool="$(Boolean.FALSE)"
                  break
               fi
            done
            
            if [[ "$(Boolean.parseBoolean "$bool")" == "$(Boolean.TRUE)" ]]; then
               Boolean.TRUE
            else
               Boolean.FALSE
            fi
         else
            __throw "WrongClassException" ": Illegal argument: \"${argobject}\": $("$argobject".getClass)"
            returnValue=$?
            __stackOrHelp "$2" "${FUNCNAME:2}"
         fi
      else
         __throw "IllegalArgumentException" ": Illegal argument: \"${argobject}\" is no object"
         returnValue=$?
         __stackOrHelp "$2" "${FUNCNAME:2}" 
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __stackOrHelp "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__diff() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 4 )) || (( $# == 5 )); then
      local this="$1"
      local argobject="$4"
      local argclass
      argclass="$("${argobject}".getClass 2>/dev/null)"
      if (( $? == 0 )); then
         if [[ "$("$this".getClass)" == "$argclass" ]]; then
            local host="$("$this".getSshHost)"
            local user="$("$this".getSshUser)"
            declare -i port="$("$this".getSshPort)"
            local file="$3"
            local targethost="$("$argobject".getSshHost)"
            local targetUser="$("$argobject".getSshUser)"
            declare -i targetPort="$("$argobject".getSshPort)"
            local targetFile="${5:-"$file"}"
            if command -v ssh >/dev/null 2>&1; then
               local command="
                  if [ -d "\${checkf}" ]; then
                     if [ -x "\${checkf}" ]; then
                        echo directory
                     else
                        echo noSearchPermission
                     fi
                  else
                     if [ -f "\${checkf}" ]; then
                        if [ -r "\${checkf}" ]; then
                           echo regular
                        else
                           echo noReadPermission
                        fi
                     else
                        echo noRegular
                     fi
                  fi
                  "
               local fileinfo1="$(ssh -n -p "${port}" "${user}"@"${host}" "checkf="${file}";${command}")"
               local fileinfo2="$(ssh -n -p "${targetPort}" "${targetUser}"@"${targethost}" "checkf="${targetFile}";${command}")"
               declare -i counter=0
               declare -a F=( $file $targetFile )
               declare -a H=( $host $targethost )
               local info
               for info in "${fileinfo1}" "${fileinfo2}"
               do
                  case "${info}" in
                     noSearchPermission)
                        __throw "IllegalArgumentException" ": Illegal argument: no search permission for \"${F[counter]}\" on \"${H[counter]}\""
                        returnValue=$?
                        __stackOrHelp "${class}" "${FUNCNAME:2}"
                        return $returnValue;;
                     noReadPermission)
                        __throw "IllegalArgumentException" ": Illegal argument: no read permission for \"${F[counter]}\" on \"${H[counter]}\""
                        returnValue=$?
                        __stackOrHelp "${class}" "${FUNCNAME:2}"
                        return $returnValue;;
                     noRegular)
                        __throw "IllegalArgumentException" ": Illegal argument: \"${F[counter]}\" on \"${H[counter]}\" is no regular file"
                        returnValue=$?
                        __stackOrHelp "${class}" "${FUNCNAME:2}"
                        return $returnValue;;
                     "")
                        __throw "IOException" ": Could not recognize type of \"${F[counter]}\" on \"${H[counter]}\""
                        returnValue=$?
                        __stackOrHelp "${class}" "${FUNCNAME:2}"
                        return $returnValue
                  esac
                  ((counter++))
               done
               if [[ "${fileinfo1}" != "${fileinfo2}" ]]; then
                     __throw "IllegalArgumentException" ": Illegal argument: diff of directory and regular file makes no sense"
                     returnValue=$?
                     __stackOrHelp "${class}" "${FUNCNAME:2}"
                     return $returnValue
               fi
               if command -v diff >/dev/null 2>&1; then
                  if [[ "$fileinfo1" = "regular" ]]; then
                     diff <(ssh -n -p "${port}" "${user}"@"${host}" cat "${file}" 2>/dev/null) \
                          <(ssh -n -p "${targetPort}" "${targetUser}"@"${targethost}" cat "${targetFile}" 2>/dev/null)
                  else
                     diff <(ssh -n -p "${port}" "${user}"@"${host}" find "${file}"/ 2>/dev/null) \
                          <(ssh -n -p "${targetPort}" "${targetUser}"@"${targethost}" find "${targetFile}"/ 2>/dev/null)
                  fi
               else
                  __throw "NotInPathException" ": diff not in path"
                  returnValue=$?
                  __stackOrHelp "${class}" "${FUNCNAME:2}"
               fi
            else
               __throw "NotInPathException" ": ssh not in path"
               returnValue=$?
               __stackOrHelp "${class}" "${FUNCNAME:2}"
            fi
         else
            __throw "WrongClassException" ": Illegal argument: \"${argobject}\": $("$argobject".getClass)"
            returnValue=$?
            __stackOrHelp "$2" "${FUNCNAME:2}"
         fi
      else
         __throw "IllegalArgumentException" ": Illegal argument: \"${argobject}\" is no object"
         returnValue=$?
         __stackOrHelp "$2" "${FUNCNAME:2}" 
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __stackOrHelp "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__diffIgnoreBlankLines() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 4 )) || (( $# == 5 )); then
      local this="$1"
      local argobject="$4"
      local argclass
      argclass="$("${argobject}".getClass 2>/dev/null)"
      if (( $? == 0 )); then
         if [[ "$("$this".getClass)" == "$argclass" ]]; then
            local host="$("$this".getSshHost)"
            local user="$("$this".getSshUser)"
            declare -i port="$("$this".getSshPort)"
            local file="$3"
            local targethost="$("$argobject".getSshHost)"
            local targetUser="$("$argobject".getSshUser)"
            declare -i targetPort="$("$argobject".getSshPort)"
            local targetFile="${5:-"$file"}"
            if command -v ssh >/dev/null 2>&1; then
               local command="
                  if [ -d "\${checkf}" ]; then
                     if [ -x "\${checkf}" ]; then
                        echo directory
                     else
                        echo noSearchPermission
                     fi
                  else
                     if [ -f "\${checkf}" ]; then
                        if [ -r "\${checkf}" ]; then
                           echo regular
                        else
                           echo noReadPermission
                        fi
                     else
                        echo noRegular
                     fi
                  fi
                  "
               local fileinfo1="$(ssh -n -p "${port}" "${user}"@"${host}" "checkf="${file}";${command}")"
               local fileinfo2="$(ssh -n -p "${targetPort}" "${targetUser}"@"${targethost}" "checkf="${targetFile}";${command}")"
               declare -i counter=0
               declare -a F=( $file $targetFile )
               declare -a H=( $host $targethost )
               local info
               for info in "${fileinfo1}" "${fileinfo2}"
               do
                  case "${info}" in
                     noSearchPermission)
                        __throw "IllegalArgumentException" ": Illegal argument: no search permission for \"${F[counter]}\" on \"${H[counter]}\""
                        returnValue=$?
                        __stackOrHelp "${class}" "${FUNCNAME:2}"
                        return $returnValue;;
                     noReadPermission)
                        __throw "IllegalArgumentException" ": Illegal argument: no read permission for \"${F[counter]}\" on \"${H[counter]}\""
                        returnValue=$?
                        __stackOrHelp "${class}" "${FUNCNAME:2}"
                        return $returnValue;;
                     noRegular)
                        __throw "IllegalArgumentException" ": Illegal argument: \"${F[counter]}\" on \"${H[counter]}\" is no regular file"
                        returnValue=$?
                        __stackOrHelp "${class}" "${FUNCNAME:2}"
                        return $returnValue;;
                     "")
                        __throw "IOException" ": Could not recognize type of \"${F[counter]}\" on \"${H[counter]}\""
                        returnValue=$?
                        __stackOrHelp "${class}" "${FUNCNAME:2}"
                        return $returnValue
                  esac
                  ((counter++))
               done
               if [[ "${fileinfo1}" != "${fileinfo2}" ]]; then
                     __throw "IllegalArgumentException" ": Illegal argument: diff of directory and regular file makes no sense"
                     returnValue=$?
                     __stackOrHelp "${class}" "${FUNCNAME:2}"
                     return $returnValue
               fi
               if command -v diff >/dev/null 2>&1; then
                  if [[ "$fileinfo1" = "regular" ]]; then
                     diff -B <(ssh -n -p "${port}" "${user}"@"${host}" cat "${file}" 2>/dev/null) \
                             <(ssh -n -p "${targetPort}" "${targetUser}"@"${targethost}" cat "${targetFile}" 2>/dev/null)
                  else
                     diff -B <(ssh -n -p "${port}" "${user}"@"${host}" find "${file}"/ 2>/dev/null) \
                             <(ssh -n -p "${targetPort}" "${targetUser}"@"${targethost}" find "${targetFile}"/ 2>/dev/null)
                  fi
               else
                  __throw "NotInPathException" ": diff not in path"
                  returnValue=$?
                  __stackOrHelp "${class}" "${FUNCNAME:2}"
               fi
            else
               __throw "NotInPathException" ": ssh not in path"
               returnValue=$?
               __stackOrHelp "${class}" "${FUNCNAME:2}"
            fi
         else
            __throw "WrongClassException" ": Illegal argument: \"${argobject}\": $("$argobject".getClass)"
            returnValue=$?
            __stackOrHelp "$2" "${FUNCNAME:2}"
         fi
      else
         __throw "IllegalArgumentException" ": Illegal argument: \"${argobject}\" is no object"
         returnValue=$?
         __stackOrHelp "$2" "${FUNCNAME:2}" 
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __stackOrHelp "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__diffIgnoreAllSpace() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 4 )) || (( $# == 5 )); then
      local this="$1"
      local argobject="$4"
      local argclass
      argclass="$("${argobject}".getClass 2>/dev/null)"
      if (( $? == 0 )); then
         if [[ "$("$this".getClass)" == "$argclass" ]]; then
            local host="$("$this".getSshHost)"
            local user="$("$this".getSshUser)"
            declare -i port="$("$this".getSshPort)"
            local file="$3"
            local targethost="$("$argobject".getSshHost)"
            local targetUser="$("$argobject".getSshUser)"
            declare -i targetPort="$("$argobject".getSshPort)"
            local targetFile="${5:-"$file"}"
            if command -v ssh >/dev/null 2>&1; then
               local command="
                  if [ -d "\${checkf}" ]; then
                     if [ -x "\${checkf}" ]; then
                        echo directory
                     else
                        echo noSearchPermission
                     fi
                  else
                     if [ -f "\${checkf}" ]; then
                        if [ -r "\${checkf}" ]; then
                           echo regular
                        else
                           echo noReadPermission
                        fi
                     else
                        echo noRegular
                     fi
                  fi
                  "
               local fileinfo1="$(ssh -n -p "${port}" "${user}"@"${host}" "checkf="${file}";${command}")"
               local fileinfo2="$(ssh -n -p "${targetPort}" "${targetUser}"@"${targethost}" "checkf="${targetFile}";${command}")"
               declare -i counter=0
               declare -a F=( $file $targetFile )
               declare -a H=( $host $targethost )
               local info
               for info in "${fileinfo1}" "${fileinfo2}"
               do
                  case "${info}" in
                     noSearchPermission)
                        __throw "IllegalArgumentException" ": Illegal argument: no search permission for \"${F[counter]}\" on \"${H[counter]}\""
                        returnValue=$?
                        __stackOrHelp "${class}" "${FUNCNAME:2}"
                        return $returnValue;;
                     noReadPermission)
                        __throw "IllegalArgumentException" ": Illegal argument: no read permission for \"${F[counter]}\" on \"${H[counter]}\""
                        returnValue=$?
                        __stackOrHelp "${class}" "${FUNCNAME:2}"
                        return $returnValue;;
                     noRegular)
                        __throw "IllegalArgumentException" ": Illegal argument: \"${F[counter]}\" on \"${H[counter]}\" is no regular file"
                        returnValue=$?
                        __stackOrHelp "${class}" "${FUNCNAME:2}"
                        return $returnValue;;
                     "")
                        __throw "IOException" ": Could not recognize type of \"${F[counter]}\" on \"${H[counter]}\""
                        returnValue=$?
                        __stackOrHelp "${class}" "${FUNCNAME:2}"
                        return $returnValue
                  esac
                  ((counter++))
               done
               if [[ "${fileinfo1}" != "${fileinfo2}" ]]; then
                     __throw "IllegalArgumentException" ": Illegal argument: diff of directory and regular file makes no sense"
                     returnValue=$?
                     __stackOrHelp "${class}" "${FUNCNAME:2}"
                     return $returnValue
               fi
               if command -v diff >/dev/null 2>&1; then
                  if [[ "$fileinfo1" = "regular" ]]; then
                     diff -w <(ssh -n -p "${port}" "${user}"@"${host}" cat "${file}" 2>/dev/null) \
                             <(ssh -n -p "${targetPort}" "${targetUser}"@"${targethost}" cat "${targetFile}" 2>/dev/null)
                  else
                     diff -w <(ssh -n -p "${port}" "${user}"@"${host}" find "${file}"/ 2>/dev/null) \
                             <(ssh -n -p "${targetPort}" "${targetUser}"@"${targethost}" find "${targetFile}"/ 2>/dev/null)
                  fi
               else
                  __throw "NotInPathException" ": diff not in path"
                  returnValue=$?
                  __stackOrHelp "${class}" "${FUNCNAME:2}"
               fi
            else
               __throw "NotInPathException" ": ssh not in path"
               returnValue=$?
               __stackOrHelp "${class}" "${FUNCNAME:2}"
            fi
         else
            __throw "WrongClassException" ": Illegal argument: \"${argobject}\": $("$argobject".getClass)"
            returnValue=$?
            __stackOrHelp "$2" "${FUNCNAME:2}"
         fi
      else
         __throw "IllegalArgumentException" ": Illegal argument: \"${argobject}\" is no object"
         returnValue=$?
         __stackOrHelp "$2" "${FUNCNAME:2}" 
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __stackOrHelp "${class}" "${FUNCNAME:2}"
   fi
   return $returnValue
}

complete -W  "$(echo ${__Ssh__[@]}) all Ssh" Ssh.help

#################
# help function #
#################
Ssh.help() {
   local printStream=${printStream:-out}  
   if (( $# == 0 )); then
      System.${printStream}.println "
                    Usage: Ssh.help all|methodname
                    Available methods:
                    -getClass -toString -equals
                    -hashCode -getSshHost -getSshUser
                    -getSshPort -command -vimEdit 
                    -connect -diff -diffIgnoreAllSpace 
                    -diffIgnoreBlankLines -copy -grep
                    -grepIgnoreCase -grepInvertMatch

                    Constructor: 
                    -Ssh
      " 
      return 0
   fi
   while (($#))
   do
      local match=$(Boolean.FALSE)
      case $1 in
         Ssh|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               Ssh
                  Constructor for the Ssh objects, checks if passwordless auth
                  is possible with name and user.
               Parameters:
                  objectname
                  <hostname>
                  <user>
                  [<port>] Default: 22
                  No "." character is allowed in the objectname string.
               Returns:
                  None
               Throws:
                  IllegalArgumentException - if number of arguments != 3 AND != 4
                                           - if objectname is not valid
                                           - if objectname is a keyword
                                           - if objectname contains full stop character
                  AuthException - if passwordless auth is not possible
               Example:
                  Ssh a <hostname> <user> [<port>]
            ";;& 
         getSshHost|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               getSshHost
                  Returns the value of name
               Parameters:
                  None
               Returns:
                  The value of name.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  SshHost mymachine mymachine.mydom.org mysshaccount
                  mymachine.getSshHostName
                  >>>mymachine.mydom.org
            ";;& 
         getSshUser|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               getSshUser
                  Returns the value of user (ssh-user)
               Parameters:
                  None
               Returns:
                  The value of user.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Ssh mymachine mymachine.mydom.org mysshaccount
                  mymachine.getSshHostUser
                  >>>mysshaccount
            ";;& 
         getSshPort|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               getSshPort
                  Returns the value of port (ssh-port)
               Parameters:
                  None
               Returns:
                  The value of port.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Ssh mymachine mymachine.mydom.org mysshaccount
                  mymachine.getSshHostPort
                  >>>22
                  Ssh mymachine mymachine.mydom.org mysshaccount 888
                  mymachine.getSshHostPort
                  >>>888
            ";;&
         command|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               command
                  Calls command on remote host 
               Parameters:
                  command
               Returns:
                  command echo output
               Throws:
                  IllegalArgumentException - if number of arguments != 1
               Example:
                  Ssh mymachine mymachine.mydom.org mysshaccount
                  mymachine.command \"date\"
                  >>>Fr 1. Jun 14:35:36 CEST 2012
            ";;&
         vimEdit|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               vimEdit
                  Opens a remote file with the local vim
               Parameters:
                  None
               Returns:
                  None
               Throws:
                  IllegalArgumentException - if number of arguments != 1
               Example:
                  Ssh mymachine mymachine.mydom.org mysshaccount
                  mymachine.vimEdit /etc/passwd
            ";;&
         connect|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               connect
                  Opens a ssh shell on remote host
               Parameters:
                  None
               Returns:
                  None.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Ssh mymachine mymachine.mydom.org mysshaccount
                  mymachine.connect
            ";;&
         copy|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               copy
                  Blub
               Parameters:
                  Blub
               Returns:
                  Blub
               Throws:
                  Blub
               Example:
                  Blub
                  Blub
            ";;&
         diff|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               diff
                  if the first [ optional: and 3rd argument] defines a regular file, then
                  the output is a diff of the two files.
                  if the first [ optional: and 3rd argument] defines a directory, then
                  the output is a diff of all filenames under given directory.
                  stderr is redirected to /dev/null
               Parameters:
                  primititve file or path on this Ssh object
                  Ssh object
                  [primititve file or path on argument Ssh object] Default: file or path of argument 1
               Returns:
                  diff output
               Throws:
                  IllegalArgumentException: -if 2nd argument is no object
                                            -if first and 3rd argument have different filetype
                                            -if filetype of first or 3rd argument is no regular file
                                            -if filetype is regular file, but read permission is missing
                                            -if filetype is directory, but search permission is missing
                                            -if number of arguments != 2 AND !=3
                  IOException; if remote recognition of filetype fails
                  NotInPathException: -if diff is not in path
                                      -if ssh is not in path
                  WrongClassException: -if 2nd argument is an object but no Ssh object
               Example:
                  machine1.diff /etc/shadow machine2
                  machine1.diff /etc/shadow machine2 /etc/copy
                  machine1.diff /opt machine2
                  machine1.diff /opt machine2 /usr/local/opt
            ";;&
         diffIgnoreBlankLines|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               diffIgnoreBlankLines
                  if the first [ optional: and 3rd argument] defines a regular file, then
                  the output is a diff of the two files.
                  if the first [ optional: and 3rd argument] defines a directory, then
                  the output is a diff of all filenames under given directory.
                  The diff output ignores all blank lines.
                  stderr is redirected to /dev/null
               Parameters:
                  primititve file or path on this Ssh object
                  Ssh object
                  [primititve file or path on argument Ssh object] Default: file or path of argument 1
               Returns:
                  diff output
               Throws:
                  IllegalArgumentException: -if 2nd argument is no object
                                            -if first and 3rd argument have different filetype
                                            -if filetype of first or 3rd argument is no regular file
                                            -if filetype is regular file, but read permission is missing
                                            -if filetype is directory, but search permission is missing
                                            -if number of arguments != 2 AND !=3
                  IOException; if remote recognition of filetype fails
                  NotInPathException: -if diff is not in path
                                      -if ssh is not in path
                  WrongClassException: -if 2nd argument is an object but no Ssh object
               Example:
                  machine1.diffIgnoreBlankLines /etc/shadow machine2
                  machine1.diffIgnoreBlankLines /etc/shadow machine2 /etc/copy
                  machine1.diffIgnoreBlankLines /opt machine2
                  machine1.diffIgnoreBlankLines /opt machine2 /usr/local/opt
            ";;&
         diffIgnoreAllSpace|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               diffIgnoreAllSpace
                  if the first [ optional: and 3rd argument] defines a regular file, then
                  the output is a diff of the two files.
                  if the first [ optional: and 3rd argument] defines a directory, then
                  the output is a diff of all filenames under given directory.
                  The diff output ignores all spaces.
                  stderr is redirected to /dev/null
               Parameters:
                  primititve file or path on this Ssh object
                  Ssh object
                  [primititve file or path on argument Ssh object] Default: file or path of argument 1
               Returns:
                  diff output
               Throws:
                  IllegalArgumentException: -if 2nd argument is no object
                                            -if first and 3rd argument have different filetype
                                            -if filetype of first or 3rd argument is no regular file
                                            -if filetype is regular file, but read permission is missing
                                            -if filetype is directory, but search permission is missing
                                            -if number of arguments != 2 AND !=3
                  IOException; if remote recognition of filetype fails
                  NotInPathException: -if diff is not in path
                                      -if ssh is not in path
                  WrongClassException: -if 2nd argument is an object but no Ssh object
               Example:
                  machine1.diffIgnoreAllSpace /etc/shadow machine2
                  machine1.diffIgnoreAllSpace /etc/shadow machine2 /etc/copy
                  machine1.diffIgnoreAllSpace /opt machine2
                  machine1.diffIgnoreAllSpace /opt machine2 /usr/local/opt
            ";;&
         getClass|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               getClass
                  Returns the runtime class of this Object.
               Parameters:
                  None
               Returns:
                  The Class object that represents the runtime class of this object.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Ssh b 1 2 3
                  b.getClass
                  >>>class Ssh
            ";;&
         toString|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               toString
                  Returns a String object representing this SshHost object in sorted order. 
               Parameters:
                  None
               Throws:
                  NotInPathException - if sort not in path
                                     - if tr not in path
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Ssh b 1 2 3
                  b.toString
                  >>><name>|<port>|<user>
            ";;&
         hashCode|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               hashCode
                  Returns a hash code for this SshHost object.
               Parameters:
                  None
               Returns:
                  a hash code for this SshHost.
               Throws:
                  NotInPathException - if bc not in path
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Ssh b 1 2 3
                  b.hashCode
            ";;&
         equals|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               equals
                  Returns true if and only if the argument is a SshHost object that 
                  represents the same SshHost value as this object. 
               Parameters:
                  anObject - The object to compare this SshHost against
               Returns:
                  true if the SshHost objects represent the same value; false otherwise.
               Throws:
                  IllegalArgumentException - if number of arguments != 1
                                           - if arguent is no object
               Example:
                  Ssh b 1 2 3
                  Ssh c 1 2 3
                  a.equals b
                  >>>true
            ";;&
         *)   if [[ $match == $(Boolean.FALSE) ]]; then
                 System.${printStream}.println "                                  
                       No help found for $1
                    "   
              fi
              ;;& 
      esac               
      shift
   done 
}
