##################################################################
# Author:  andreas.gregor.frank@googlemail.com                                
#     
# License: The MIT License
#
# Copyright (c) <2010> <andreas.gregor.frank@googlemail.com>

###################
###################
##               ##
##     SYSTEM    ## 
##               ##
###################
###################


##################
#                #
#     STATICS    # 
#                #
##################

System.currentTimeMillis() {
   if (( $# == 0 )); then
      if __gnudateCheck; then
         local date=$(date +%s%N)
         System.out.println ${date:0:13}
         return 0
      else
         __throw "NotInPathException" ": GNU date not in path"
         return 1
      fi
   fi
   __throw "IllegalArgumentException" ": Wrong number of arguments $#"
   local printStream=err
   System.help $FUNCNAME
   return 1
}
__registerFunction System.currentTimeMillis

System.currentTimeNanos() {
   if (( $# == 0 )); then
      if __gnudateCheck; then
         date +%s%N
         return 0
      else
         __throw "NotInPathException" ": GNU date not in path"
         return 1
      fi
   fi
   __throw "IllegalArgumentException" ": Wrong number of arguments $#"
   local printStream=err
   System.help $FUNCNAME
   return 1
}
__registerFunction System.currentTimeNanos

System.exit() {
   if (( $# == 1 )); then
      (declare -i status=$1) 2>/dev/null ||  (return 1)
      if (( $? != 0 )); then
         __throw "IllegalArgumentException" ": Illegal argument: \"$1\""
         local printStream=err
         System.help $FUNCNAME
         return 1         
      fi
      declare -i status="$1"
      if (( $status >= 0 && $status <= 255 )); then
         exit $status
      else
         __throw "IllegalArgumentException" ": Illegal argument: \"$status\" - has to be between 0 and 255"
         local printStream=err
         System.help $FUNCNAME
         return 1
      fi
   fi
   __throw "IllegalArgumentException" ": Wrong number of arguments $#"
   local printStream=err
   System.help $FUNCNAME
   return 1
}
__registerFunction System.exit

System.err.println() {
   if (( $# <= 1  )); then
      local message="$1"
      printf "%s\n" "$message" >&2
      return 0
   fi
   __throw "IllegalArgumentException" ": Wrong number of arguments $#"
   local printStream=err
   System.help $FUNCNAME
   return 1
}
__registerFunction System.err.println

System.out.println() {
   if (( $# <= 1  )); then
      local message="$1"
      printf "%s\n" "$message"
      return 0
   fi
   __throw "IllegalArgumentException" ": Wrong number of arguments $#"
   local printStream=err
   System.help $FUNCNAME
   return 1
}
__registerFunction System.out.println

#################
#               #
#     HELP      # 
#               #
#################

complete -W  "exit currentTimeMillis currentTimeNanos out.println err.println all" System.help

System.help() {  
   local printStream=${printStream:-out}
   if (( $# == 0 )); then
      System.${printStream}.println "
      Usage: System.help all|methodname
      Available methods:
      -System.exit -System.currentTimeMillis
      -System.err.println -System.out.println
      Constructor: 
      None
                 "
      return 0
   fi
   while (($#))
   do
      local match=$(Boolean.FALSE)  
      case $1 in 
         System.exit|exit|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
            System.exit
               Terminates the currently running bash. 
               The argument serves as a status code; by convention, a 
               nonzero status code indicates abnormal termination.
            Parameters:
               status - exit status (0-255)
            Throws:
               IllegalArgumentException - if number of arguments != 1
                                          if argument can not be defined as integer
                                          if argument not between 0 and 255
            ";;&
         System.currentTimeNanos|currentTimeNanos|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
            System.currentTimeNanos
               Returns the current time in nanoseconds. Note that while 
               the unit of time of the return value is a nanosecond, the 
               granularity of the value depends on the underlying operating 
               system.
            Parameters:
               None
            Throws:
               NotInPathException - if GNU date is not in path
               IllegalArgumentException - if number of arguments != 0
            Returns:
               the difference, measured in nanoseconds, between the current 
               time and midnight, January 1, 1970 UTC.
            Example:
               System.currentTimeNanos
               >>>1295883747179966215
            ";;&
         System.out.println|out.println|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
            System.out.println
               Prints a String and then terminate the line to \"standard\" output 
            Parameters:
               x - The String to be printed.
            Throws:
               IllegalArgumentException - if number of arguments != 1
            Example:
               System.out.println "hello"
               >>>hello
            ";;&
         System.err.println|err.println|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
            System.err.println
               Prints a String and then terminate the line to \"standard\" error output
            Parameters:
               x - The String to be printed.
            Throws:
               IllegalArgumentException - if number of arguments != 1
            Example:
               System.out.println "hello"
               >>>hello
            ";;&         
         System.currentTimeMillis|currentTimeMillis|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
            System.currentTimeMillis
               Returns the current time in milliseconds. Note that while 
               the unit of time of the return value is a millisecond, the 
               granularity of the value depends on the underlying operating 
               system.
            Parameters:
               None
            Throws:
               NotInPathException - if GNU date is not in path
               IllegalArgumentException - if number of arguments != 0
            Returns:
               the difference, measured in milliseconds, between the current 
               time and midnight, January 1, 1970 UTC.
            Example:
               System.currentTimeMillis
               >>>1292145813665
            ";;&
         *)   if [[ $match == $(Boolean.FALSE) ]]; then
                 System.${printStream}.println "                                  
                       No help found for $1
                    "   
              fi
              ;;& 
      esac    
      shift
   done            
}
__registerFunction System.help
