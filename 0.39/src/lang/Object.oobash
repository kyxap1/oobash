##################################################################
# Author:  andreas.gregor.frank@googlemail.com                                
#     
# License: The MIT License
#
# Copyright (c) <2010> <andreas.gregor.frank@googlemail.com>

##############################
##############################
##                          ##
##    ABSTRACT  OBJECT      ## 
##                          ##
##############################
##############################


#####################
#                   #
#      METHODS      # 
#                   #
#####################

# getClass
#    Returns the class of this Object.
#    Parameters:
#       None
#    Returns:
#       The Class object that represents the runtime class of this object.
# Example:
#    File a xxx
#    String b xxx
#    Boolean c xxx
#    a.getClass
#    >>>class File
#    b.getClass
#    >>>class String
#    c.getClass
#    >>>class Boolean
__getClass() 
{
   local class="$2"
   if (( $# == 2 ))
   then
      System.out.println "class $class"
      return 0
   fi
   local printStream=err
   ${class}.help ${FUNCNAME:2}
   return 1
}

# String:
# toString
#    This object (which is already a string!) is itself returned.
# Parameters:
#    None
# Returns:
#    the string itself.
# Example:
#    String a abc
#    a.toString
#    >>>abc

# File:
# toString
# Parameters:
#    None
# Returns:
#    Returns the pathname string of this abstract pathname. 
# Example:
#    File a /tmp/A
#    a.toString
#    >>>/tmp/A

# Boolean
# toString
#    Returns a String object representing this Boolean's value. 
#    If this object represents the value true, a string equal to "true" 
#    is returned. Otherwise, a string equal to "false" is returned. 
# Parameters:
#    None
# Example:
#    Boolean b xxx
#    b.toString
#    >>>false  
__toString()
{
   if (( $# == 2 ))
   then
      local this="$1"
      local class="$2"
      local key
      for key in "${!__OBJECTPOOL__[@]}"
      do 
         if [[ "$this" == "$key" ]];
         then
            local str="${__OBJECTPOOL__["$this"]}"
            declare -i i=0
            for ((i=0; i < ${#str}; i++))
            do
               local char="${str:i:1}"
               if [[ $char == "@" ]]
               then
                  local j=$(($i+1))
                  local pointer="${str:j}"
               fi
            done              
         fi
      done
      case $class in
         Level) 
         System.out.println "${__ATTRIBUTEPOOL__[${pointer}@levelStr]}"
         return 0
         ;;
      esac
      local str=''
      local first=$(Boolean.TRUE)
      if command -v tr >/dev/null 2>&1
      then
         if command -v sort  >/dev/null 2>&1
         then
            local keys=$(echo "${!__ATTRIBUTEPOOL__[@]}"  | tr " " "\n" | sort | tr "\n" " " )
         else
            __throw "NotInPathException" ": sort not in path"
            return 1
         fi
      else
         __throw "NotInPathException" ": tr not in path"
         return 1
      fi         
      for key in $keys
      do
         if [[ "$key" == "${pointer}"* ]];
         then
            if [[ $first == $(Boolean.TRUE) ]]
            then
               str="$str""${__ATTRIBUTEPOOL__["$key"]}"
               first=$(Boolean.FALSE)
            else
               str="$str""|""${__ATTRIBUTEPOOL__["$key"]}"
            fi
         fi      
      done
      System.out.println "${str}"
      return 0
   fi
   local class=$2 
   local printStream=err
   ${class}.help ${FUNCNAME:2}
   return 1
}



# String:
# equals
#    Compares this string to the specified object. 
#    The result is true if and only if the argument is not null 
#    and is a String object that represents the same sequence of 
#    characters as this object.
# Parameters:
#    anObject - The object to compare this String against
# Returns:
#    true if the given object represents a String equivalent 
#    to this string, false otherwise
# Example:
#    String a abc
#    String b abc
#    String c ddd
#    a.equals b
#    >>>true
#    a.equals c
#    >>>false


# File:
# equals
#    Tests this abstract pathname for equality with the given object. 
#    Returns true if and only if the argument is not null and is an 
#    abstract pathname that denotes the same file or directory as this 
#    abstract pathname.
# Parameters:
#    anObject - The object to be compared with
# Returns:
#    true if and only if the objects are the same; false otherwise
# Example:
#    File a yyy
#    File b yyy
#    File c xxx
#    a.equals c
#    >>>false
#    a.equals b
#    >>>true

# Boolean
# equals
#    Returns true if and only if the argument is a Boolean object that 
#    represents the same boolean value as this object. 
# Parameters:
#    anObject - The object to compare this Boolean against
# Returns:
#    true if the Boolean objects represent the same value; false otherwise.
# Example:
#    Boolean a abc
#    Boolean b true
#    a.equals a
#    >>>true
#    a.equals b
#    >>>false
__equals()
{
   if (( $# == 3 ))
   then
      local this="$1"
      local argobject="$3"
      local argclass
      argclass="$("$argobject".getClass 2>/dev/null)" 
      if (( $? == 0 ))
      then
         if [[ "$("$this".getClass)" == "$argclass" ]]
         then
            case $argclass in
            Level)
               if [[ "$("$argobject".toInt)" == "$("$this".toInt)" ]]
               then
                  Boolean.TRUE
                  return 0
               fi;;            
            *)
               if [[ "$("$argobject".toString)" == "$("$this".toString)" ]]
               then
                  Boolean.TRUE
                  return 0
               fi;;
            esac
         fi
         Boolean.FALSE
         return 0
      fi
   fi
   local class=$2 
   local printStream=err
   ${class}.help ${FUNCNAME:2}
   return 1
}

# String:
# hashCode
# Parameters:
#    None 
# Returns 
#    a hash code for this string. The hash code for a String object is computed as
#         s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]         
#    using int arithmetic, where s[i] is the ith character of the string, 
#    n is the length of the string, and ^ indicates exponentiation. 
#    (The hash value of the empty string is zero.)  
# Example:
#    String a abcdef
#    a.hashCode
#    >>>-1424385949
# File:
# hashCode
#    Computes a hash code for this abstract pathname. Because 
#    equality of abstract pathnames is inherently system-dependent, 
#    so is the computation of their hash codes. On UNIX systems, the 
#    hash code of an abstract pathname is equal to the exclusive or of 
#    the hash code of its pathname string and the decimal value 1234321.
#    Parameters:
#       None 
#    Returns:
#       A hash code for this abstract pathname
#    Example:
#       File a /tmp/abc
#       a.hashCode
#       >>>-889608758
__hashCode() 
{
   # for being compatible with java:
   # simulating 32-bit modular arithmetic ignoring overflow  ==>
   # MAX_VALUE 	= 	2147483647
   # MIN_VALUE 	= 	-2147483648
   local this="$1"
   local class="$2"
   if (( $# == 2 ))
   then
      if command -v bc >/dev/null 2>&1
      then 
         declare -i hash=0
         local str="$("$this".toString)" 
         declare -i i=0
         for ((i=0; i < ${#str}; i++))
         do    
            local valueOf=$(printf '%d\n' "'${str:i:1}")
            hash=$(System.out.println "$hash*31+$valueOf" | bc)
         done
         hash=$(System.out.println "$hash-((2^32)*($hash/(2^32)))" | bc) 
         if (( $hash > 2147483647 ))
         then
            hash=$(System.out.println "$hash-(2^32)" | bc)
         fi
         case $class in
            File)
               System.out.println $(($hash^1234321));;
            Boolean)
               if [[ "$str" == $(Boolean.TRUE) ]]
               then
                  System.out.println 1231
               else
                  System.out.println 1237
               fi;;    
            String)
               System.out.println $hash;; 
            # Default for user created classes                
            *)
               System.out.println $hash;;   
         esac  
         return 0
      else
         __throw "NotInPathException" ": bc not in path"
         return 1
      fi   
   fi
   local printStream=err
   ${class}.help ${FUNCNAME:2}
   return 1
}
