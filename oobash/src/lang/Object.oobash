##################################################################
# Author:  andreas.gregor.frank@googlemail.com                                
#     
# License: The MIT License
#
# Copyright (c) <2010> <andreas.gregor.frank@googlemail.com>

##############################
##############################
##                          ##
##    ABSTRACT  OBJECT      ## 
##                          ##
##############################
##############################


#####################
#                   #
#      METHODS      # 
#                   #
#####################

__getClass() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   local class="$2"
   if (( $# == 2 )); then
      System.out.println "class ${class}"
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __handleErrorMessage "$2" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__toString() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   if (( $# == 2 )); then
      local this="$1"
      local class="$2"
      local pointer
      pointer="$(__getObjectPointer "${this}")"
      case "${class}" in
         Level) 
         System.out.println "${__ATTRIBUTEPOOL__[${pointer}@levelStr]}"
         return $returnValue
         ;;
      esac
      local str=''
      local first=$(Boolean.TRUE)
      if command -v tr >/dev/null 2>&1; then
         if command -v sort  >/dev/null 2>&1; then
            local keys=$(echo "${!__ATTRIBUTEPOOL__[@]}"  | tr " " "\n" | sort | tr "\n" " " )
         else
            __throw "NotInPathException" ": sort not in path"
            returnValue=$?
            __handleErrorMessage "$2" "${FUNCNAME:2}"
            return $returnValue
         fi
      else
         __throw "NotInPathException" ": tr not in path"
         returnValue=$?
         __handleErrorMessage "$2" "${FUNCNAME:2}"
         return $returnValue
      fi         
      for key in $keys
      do
         if [[ "${key}" == "${pointer}"@* ]]; then
            if [[ ${first} == $(Boolean.TRUE) ]]; then
               str="$str""${__ATTRIBUTEPOOL__["$key"]}"
               first="$(Boolean.FALSE)"
            else
               str="$str""|""${__ATTRIBUTEPOOL__["$key"]}"
            fi
         fi      
      done
      System.out.println "${str}"
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __handleErrorMessage "$2" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__equals() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   if (( $# == 3 )); then
      local this="$1"
      local argobject="$3"
      local argclass
      argclass="$("$argobject".getClass 2>/dev/null)" 
      if (( $? == 0 )); then
         if [[ "$("$this".getClass)" == "$argclass" ]]; then
            case $argclass in
            Level)
               if [[ "$("$argobject".toInt)" == "$("$this".toInt)" ]]; then
                  Boolean.TRUE
               else
                  Boolean.FALSE
               fi;;            
            *)
               if [[ "$("$argobject".toString)" == "$("$this".toString)" ]]; then
                  Boolean.TRUE
               else
                  Boolean.FALSE
               fi;;
            esac
         fi
      else
         __throw "IllegalArgumentException" ": Illegal argument: \"$3\" is no object"
         returnValue=$?
         __handleErrorMessage "$2" "${FUNCNAME:2}"
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __handleErrorMessage "$2" "${FUNCNAME:2}"
   fi
   return $returnValue
}

__hashCode() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   # for being compatible with java:
   # simulating 32-bit modular arithmetic ignoring overflow  ==>
   # MAX_VALUE 	= 	2147483647
   # MIN_VALUE 	= 	-2147483648
   local this="$1"
   local class="$2"
   if (( $# == 2 )); then
      if command -v bc >/dev/null 2>&1; then 
         declare -i hash=0
         local str="$("$this".toString)" 
         local valueOf
         declare -i i=0
         for ((i=0; i < ${#str}; i++))
         do    
            valueOf=$(__charCode "${str:i:1}")
            hash=$(System.out.println "$hash*31+$valueOf" | bc)
         done
         hash=$(System.out.println "$hash-((2^32)*($hash/(2^32)))" | bc) 
         if (( ${hash} > 2147483647 )); then
            hash=$(System.out.println "${hash}-(2^32)" | bc)
         fi
         case ${class} in
            File)
               System.out.println $(($hash^1234321));;
            Boolean)
               if [[ "$str" == $(Boolean.TRUE) ]]; then
                  System.out.println 1231
               else
                  System.out.println 1237
               fi;;    
            String)
               System.out.println ${hash};; 
            # Default for user created classes                
            *)
               System.out.println ${hash};;   
         esac  
      else
         __throw "NotInPathException" ": bc not in path"
         returnValue=$?
         __handleErrorMessage "$2" "${FUNCNAME:2}"
      fi
   else
      __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
      returnValue=$?
      __handleErrorMessage "$2" "${FUNCNAME:2}"
   fi
   return $returnValue
}
