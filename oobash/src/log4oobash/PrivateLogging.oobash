##################################################################
# Author:  andreas.gregor.frank@googlemail.com
#
# License: The MIT License
#
# Copyright (c) <2012> <andreas.gregor.frank@googlemail.com>

###############################
###############################
##                           ##
##      PRIVATE LOGGING      ##
##                           ##
###############################
###############################

# Index of content:
# __getLoggingTimestamp() returns a timestamp for logevent
# __isXTRACEFDAvailable() checks if BASH_XTRACEFD is available with this bash version
# __getFreeFD() tries to return a free file descriptor

# private
# returns a timestamp for logevent
# called by:
__getLoggingTimestamp() {
   if command -v date 2>&1 1>/dev/null; then
      local default="%b %e, %Y %r"
      local datePattern="${1:-$default}"
      date "+${datePattern}"
   else
      System.out.println "$SECONDS sec"
   fi
   return 0
}
__registerFunction __getLoggingTimestamp

# private
# checks if BASH_XTRACEFD is available with this bash version
# called by:
__isXTRACEFDAvailable() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   if (( ${BASH_VERSINFO[1]} != 0 )); then
      return 0
   else
      return 1
   fi
}
__registerFunction __isXTRACEFDAvailable

# private
# tries to return a free file descriptor
# called by:
__getFreeFD() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   if (( $? == 1 )); then
      shopt -s extglob
      unsetAtEnd=$(Boolean.TRUE)
   fi
   declare -i freeFD=0
   declare -i maxFDCount
   maxFDCount=$(( $(ulimit -n) ))

   if [[ "$(uname -s 2>/dev/null)" == "Linux" ]]; then
      while [[ -e /proc/$$/fd/${freeFD} ]] && (( ${freeFD} < ${maxFDCount} )); do
         ((freeFD++))
      done
   else
      if command -v lsof >/dev/null 2>&1; then
         declare -i i
         local fd
         local bool
         for ((freeFD=0; freeFD < ${maxFDCount}; freeFD++)); do
            bool="$(Boolean.TRUE)"
            for fd in $(lsof -p $$ -F f); do
               if [[ "$fd" == f* ]]; then
                  fd="${fd:1}"
                  if [[ "${fd##+([[:digit:]])}" == "" ]]; then
                     if (( $fd == $freeFD)); then
                        bool="$(Boolean.FALSE)"
                        break
                     fi
                  fi
               fi
            done
            if [[ "$(Boolean.parseBoolean "$bool")" == "$(Boolean.TRUE)" ]]; then
               break
            fi
         done
      else
         return 1
      fi
   fi

   # You will recognize this problem much earlier... ;-)
   if (( freeFD == maxFDCount )); then
      return 1
   fi

   if (( $returnValue == 0 )); then
      System.out.println ${freeFD}
   fi

   if [[ "${unsetAtEnd}" == "$(Boolean.TRUE)" ]]; then
      shopt -u extglob
   fi
   return $returnValue
}
__registerFunction __getFreeFD