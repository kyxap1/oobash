##################################################################
# Author:  andreas.gregor.frank@googlemail.com                                
#     
# License: The MIT License
#
# Copyright (c) <2010> <andreas.gregor.frank@googlemail.com>

#########################
#########################
##                     ##
##      GENERATOR      ## 
##                     ##
#########################
#########################

Class.generator() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   if (( $# >= 2 )); then
      # check for valid class name
      local userClass="$1"
      shift
      eval local \'"$userClass"\'=test 2>/dev/null
      if (( $? != 0 )); then
         I18n.err.message "Sorry, no valid classname: '\$userClass'"
         return 1
      fi         

      declare -a  attributes=("$@")

      declare -a getters

      # check for valid attribute name + generate array of getters
      declare -i i
      for ((i=0; i < ${#attributes[@]}; i++))
      do
         eval local \'"${attributes[$i]}"\'=test 2>/dev/null
         if (( $? != 0 )); then
            I18n.err.message "Sorry, no valid attribute name: '\${attributes[$i]}'"
            return 1
         else
            getters+=("get$(__strUpper ${userClass:0:1})${userClass:1}$(__strUpper ${attributes[$i]:0:1})${attributes[$i]:1}")
         fi             
      done

System.out.println "#############################################################
# Author:  $USER
# Date:    $(date +%Y-%m-%d 2>/dev/null)
# License: The MIT License
# Copyright (c) <$(date +%Y 2>/dev/null)> <$USER>
#############################################################

 
# Definition of ${userClass} method array for inheritance actions
declare -a __${userClass}Methods__=($(echo ${getters[@]}))

# Definition of ${userClass} method array:
declare -a __${userClass}__=(\${__${userClass}Methods__[@]} \${__ObjectMethods__[@]})
"

###############################
# Create constructor function:#
###############################

System.out.println "
#########################
# constructor  function #
#########################
$userClass() {
   __decoratorCheck  \"\${FUNCNAME[0]}\" \"\${BASH_SOURCE[0]}\" \"\$@\"
   declare -i returnValue=0
   if (( \$# == $((${#attributes[@]} + 1 )) )); then
      local this=\"\$1\""
      for (( i=0; i < ${#attributes[@]}; i++))
      do
         System.out.println "      local ${attributes[$i]}=\"\$$(( i + 2 ))\""
      done
      System.out.println "      
      if ! __visible \"\$this\"; then
         I18n.err.message \"Sorry, objectname '\$this' is not valid\"
         return 1
      fi  

      if ! __checkForKeywords \"\$this\"; then
         I18n.err.message \"Sorry, objectname '\$this' is a keyword\"
         return 1
      fi 

      if ! __periodCheck \"\$this\"; then
         I18n.err.message \"Sorry, no full stop character allowed in objectname\"
         return 1
      fi

      local pointer=\"\$(__getPointer)\"

      local class=\$FUNCNAME

      __destructor \"\$this\"

      __alias \"\$this\" \"\$FUNCNAME\"
      "
      for (( i=0; i < ${#attributes[@]}; i++))
      do
         System.out.println "      __attribute ${attributes[$i]} \"\$${attributes[$i]}\""
      done
      System.out.println "
      return 0
   fi
   __throw \"IllegalArgumentException\" \": Wrong number of arguments \$#\"
   returnValue=\$?
   __stackOrHelp \"\${FUNCNAME}\" \"\${FUNCNAME}\"
   return \$returnValue
}
__registerClass $userClass
"

###########################
# Create getter functions:#
###########################

System.out.println "
######################
# getter function(s) #
######################
"
declare -i j
for (( j=0; j < ${#attributes[@]}; j++))
do
   System.out.println "__get$(__strUpper ${userClass:0:1})${userClass:1}$(__strUpper ${attributes[$j]:0:1})${attributes[$j]:1}() {
   __decoratorCheck  \"\${FUNCNAME[0]}\" \"\${BASH_SOURCE[0]}\" \"\$@\"
   declare -i returnValue=0
   if (( \$# == 2 )); then
      local this=\"\$1\"
      local key
      for key in \"\${!__OBJECTPOOL__[@]}\"
      do 
         if [[ \"\$this\" == \"\$key\" ]]; then
            local str=\"\${__OBJECTPOOL__[\"\$this\"]}\"
            declare -i i=0
            for ((i=0; i < \${#str}; i++))
            do
               local char=\"\${str:i:1}\"
               if [[ \$char == \"@\" ]]; then
                  local j=\$((\$i+1))
                  local pointer=\"\${str:j}\"
               fi
            done              
         fi
      done
      System.out.println \"\${__ATTRIBUTEPOOL__[\${pointer}@${attributes[$j]}]}\" 
      return 0
   fi
   __throw \"IllegalArgumentException\" \": Wrong number of arguments \$((\$#-2))\"
   returnValue=\$?
   __stackOrHelp \"\$2\" \"\${FUNCNAME:2}\"
   return \$returnValue
}
"
done

########################
# Create help function:#
########################

System.out.println "
complete -W  \"\$(echo \${__${userClass}__[@]}) all ${userClass}\" ${userClass}.help

#################
# help function #
#################
${userClass}.help() {  
   local printStream=\${printStream:-out}  
   if (( \$# == 0 )); then
      System.\${printStream}.println \"
                    Usage: ${userClass}.help all|methodname
                    Available methods:
                    -getClass
                    -toString
                    -equals
                    -hashCode"
      for (( i=0; i < ${#attributes[@]}; i++))
      do
         System.out.println "                    -get${userClass}$(__strUpper ${attributes[$i]:0:1})${attributes[$i]:1}"
      done
      System.out.println "                    Constructor: 
                    -${userClass}
      \" 
      return 0
   fi
   while ((\$#))
   do
      local match=\$(Boolean.FALSE)
      case \$1 in
         ${userClass}|all)
            match=\$(Boolean.TRUE)
            System.\${printStream}.println \"
               ${userClass}
                  Constructor for the ${userClass} objects.
               Parameters:
                  objectname" 

      for (( i=0; i < ${#attributes[@]}; i++))
      do
         System.out.println "                  <${attributes[$i]}>"
      done
   System.out.println "                  No \".\" character is allowed in the objectname string.
               Returns:
                  None
               Throws:
                  IllegalArgumentException - if number of arguments != $((${#attributes[@]}+1))
               Example:"
   System.out.print "                  ${userClass} a "
   for (( i=0; i < ${#attributes[@]}; i++))
   do
      System.out.print  "<${attributes[$i]}> "
   done
   System.out.println "
            \";;& "
   declare -i count=0
   declare -a values=($(eval echo {1..${#attributes[@]}}))
   for (( i=0; i < ${#attributes[@]}; i++))
   do
      System.out.println "         get${userClass}$(__strUpper ${attributes[$i]:0:1})${attributes[$i]:1}|all)
            match=\$(Boolean.TRUE)
            System.\${printStream}.println \"
               get${userClass}$(__strUpper ${attributes[$i]:0:1})${attributes[$i]:1}
                  Returns the value of ${attributes[$i]}
               Parameters:
                  None
               Returns:
                  The value of ${attributes[$i]}.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  ${userClass} b $(eval echo {1..${#attributes[@]}})
                  b.get$(__strUpper ${attributes[$i]:0:1})${attributes[$i]:1}
                  >>>$(echo ${values[$count]})
            \";;& "
      count+=1
   done
   System.out.println "         getClass|all)
            match=\$(Boolean.TRUE)
            System.\${printStream}.println \"
               getClass
                  Returns the runtime class of this Object.
               Parameters:
                  None
               Returns:
                  The Class object that represents the runtime class of this object.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  ${userClass} b $(eval echo {1..${#attributes[@]}})
                  b.getClass
                  >>>class ${userClass}
            \";;&
         toString|all)
            match=\$(Boolean.TRUE)
            System.\${printStream}.println \"
               toString
                  Returns a String object representing this ${userClass} object in sorted order. 
               Parameters:
                  None
               Throws:
                  NotInPathException - if sort not in path
                                     - if tr not in path
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  ${userClass} b $(eval echo {1..${#attributes[@]}})
                  b.toString"
      if command -v tr >/dev/null 2>&1; then
         if command -v sort  >/dev/null 2>&1; then
            declare -a special=($(echo "${attributes[@]}"  | tr " " "\n" | sort | tr "\n" " " ))
         else
            __throw "NotInPathException" ": sort not in path"
            return $?
         fi
      else
         __throw "NotInPathException" ": tr not in path"
         return $?
      fi
      System.out.print "                  >>>"
      for (( i=0; i < ${#special[@]}; i++))
      do
         if (( $i != 0 )); then
            System.out.print                 \|\<"${special[$i]}"\>
         else
            System.out.print                 \<"${special[$i]}"\>
         fi
      done
   System.out.println "
            \";;&
         hashCode|all)
            match=\$(Boolean.TRUE)
            System.\${printStream}.println \"
               hashCode
                  Returns a hash code for this ${userClass} object.
               Parameters:
                  None
               Returns:
                  a hash code for this ${userClass}.
               Throws:
                  NotInPathException - if bc not in path
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  ${userClass} b $(eval echo {1..${#attributes[@]}})
                  b.hashCode
            \";;&
         equals|all)
            match=\$(Boolean.TRUE)
            System.\${printStream}.println \"
               equals
                  Returns true if and only if the argument is a ${userClass} object that 
                  represents the same ${userClass} value as this object. 
               Parameters:
                  anObject - The object to compare this ${userClass} against
               Returns:
                  true if the ${userClass} objects represent the same value; false otherwise.
               Throws:
                  IllegalArgumentException - if number of arguments != 1
                                           - if arguent is no object
               Example:
                  ${userClass} b $(eval echo {1..${#attributes[@]}})
                  ${userClass} c $(eval echo {1..${#attributes[@]}})
                  a.equals b
                  >>>true
            \";;&
         *)   if [[ \$match == \$(Boolean.FALSE) ]]; then
                 System.\${printStream}.println \"                                  
                       No help found for \$1
                    \"   
              fi
              ;;& 
      esac               
      shift
   done 
}

"      
      return 0       
   fi
   System.err.println
   I18n.err.message "   Please enter one class name and the attributes"
   I18n.err.message "   Example:" 
   I18n.err.message "   Class.generator Person name age city > Person.oobash" 
   I18n.err.message "   source Person.oobash" 
   I18n.err.message "   Person a john 22 london"
   I18n.err.message "   a.getPersonAge"
   I18n.err.message "   >>>22" 
   I18n.err.message "   a.getClass"
   I18n.err.message "   >>>class Person"
   I18n.err.message "   a.getPersonName"
   I18n.err.message "   >>>john"
   I18n.err.message "   a.getPersonCity"
   I18n.err.message "   >>>london"
   System.err.println 
   I18n.err.message "   If you develop something useful or funny, please" 
   I18n.err.message "   send it to me and i will publish it on sourceforge."
   I18n.err.message "   Happy bashing !"
   System.err.println 
   return 1   
}
__registerFunction Class.generator
