#############################################################
# Author:  franka
# Date:    2012-01-26
# License: The MIT License
# Copyright (c) <2012> <franka>
#############################################################

 
# Definition of Host method array for inheritance actions
# vimEdit method only if bash isinteractive
if [[ -n "$PS1" ]]; then
   declare -a __HostMethods__=(getHostName getHostUser getHostPort isAlive vimEdit)
else
   declare -a __HostMethods__=(getHostName getHostUser getHostPort isAlive)
fi

# Definition of Host method array:
declare -a __Host__=(${__HostMethods__[@]} ${__ObjectMethods__[@]})


#########################
# constructor  function #
#########################
Host() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   if (( $# == 3 )) || (( $# == 4 )); then
      local this="$1"
      local name="$2"
      local user="$3"
      # Default port for ssh: 22
      local port="${4:-22}"
      
      if ! __visible "$this"; then
         I18n.err.message "Sorry, objectname '$this' is not valid"
         return 1
      fi  

      if ! __checkForKeywords "$this"; then
         I18n.err.message "Sorry, objectname '$this' is a keyword"
         return 1
      fi 

      if ! __periodCheck "$this"; then
         I18n.err.message "Sorry, no full stop character allowed in objectname"
         return 1
      fi

      local pointer="$(__getPointer)"

      local class=$FUNCNAME

      __destructor "$this"

      __alias "$this" "$FUNCNAME"
      
      __attribute name "$name"
      __attribute user "$user"
      __attribute port "$port"

      return $returnValue
   fi
   __throw "IllegalArgumentException" ": Wrong number of arguments $#"
   returnValue=$?
   __stackOrHelp "${FUNCNAME}" "${FUNCNAME}"
   return $returnValue
}
__registerClass Host


######################
# getter function(s) #
######################

__getHostName() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   if (( $# == 2 )); then
      local this="$1"
      local key
      for key in "${!__OBJECTPOOL__[@]}"
      do 
         if [[ "$this" == "$key" ]]; then
            local str="${__OBJECTPOOL__["$this"]}"
            declare -i i=0
            for ((i=0; i < ${#str}; i++))
            do
               local char="${str:i:1}"
               if [[ $char == "@" ]]; then
                  local j=$(($i+1))
                  local pointer="${str:j}"
               fi
            done              
         fi
      done
      System.out.println "${__ATTRIBUTEPOOL__[${pointer}@name]}" 
      return $returnValue
   fi
   __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
   returnValue=$?
   __stackOrHelp "$2" "${FUNCNAME:2}"
   return $returnValue
}

__getHostUser() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   if (( $# == 2 )); then
      local this="$1"
      local key
      for key in "${!__OBJECTPOOL__[@]}"
      do 
         if [[ "$this" == "$key" ]]; then
            local str="${__OBJECTPOOL__["$this"]}"
            declare -i i=0
            for ((i=0; i < ${#str}; i++))
            do
               local char="${str:i:1}"
               if [[ $char == "@" ]]; then
                  local j=$(($i+1))
                  local pointer="${str:j}"
               fi
            done              
         fi
      done
      System.out.println "${__ATTRIBUTEPOOL__[${pointer}@user]}" 
      return $returnValue
   fi
   __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
   returnValue=$?
   __stackOrHelp "$2" "${FUNCNAME:2}"
   return $returnValue
}

__getHostPort() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   if (( $# == 2 )); then
      local this="$1"
      local key
      for key in "${!__OBJECTPOOL__[@]}"
      do 
         if [[ "$this" == "$key" ]]; then
            local str="${__OBJECTPOOL__["$this"]}"
            declare -i i=0
            for ((i=0; i < ${#str}; i++))
            do
               local char="${str:i:1}"
               if [[ $char == "@" ]]; then
                  local j=$(($i+1))
                  local pointer="${str:j}"
               fi
            done              
         fi
      done
      System.out.println "${__ATTRIBUTEPOOL__[${pointer}@port]}" 
      return $returnValue
   fi
   __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
   returnValue=$?
   __stackOrHelp "$2" "${FUNCNAME:2}"
   return $returnValue
}

__isAlive() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   if (( $# == 2 )); then
      local this="$1"
      local machine="$("$this".getHostName)"
      # icmp alive test
      if ping -c 1 -w 5 "$machine" &>/dev/null ; then
         Boolean.TRUE
      else
         Boolean.FALSE
      fi
      return $returnValue
   fi
   __throw "IllegalArgumentException" ": Wrong number of arguments $(($#-2))"
   returnValue=$?
   __stackOrHelp "$2" "${FUNCNAME:2}"
   return $returnValue
}

if [[ -n "$PS1" ]]; then
   __vimEdit() {
   __decoratorCheck  "${FUNCNAME[0]}" "${BASH_SOURCE[0]}" "$@"
   declare -i returnValue=0
   if (( $# == 2 )); then
      local this="$1"
      local machine="$("$this".getHostName)"
      local user="$("$this".getHostUser)"
      local port="$("$this".getHostPort)"
      vim scp://$user@$machine:$port//etc/passwd
   fi
   }
fi

complete -W  "$(echo ${__Host__[@]}) all Host" Host.help

#################
# help function #
#################
Host.help() {  
   local printStream=${printStream:-out}  
   if (( $# == 0 )); then
      System.${printStream}.println "
                    Usage: Host.help all|methodname
                    Available methods:
                    -getClass
                    -toString
                    -equals
                    -hashCode
                    -getHostName
                    -getHostUser
                    -getHostPort
                    Constructor: 
                    -Host
      " 
      return 0
   fi
   while (($#))
   do
      local match=$(Boolean.FALSE)
      case $1 in
         Host|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               Host
                  Constructor for the Host objects.
               Parameters:
                  objectname
                  <name>
                  <user>
                  <port>
                  No "." character is allowed in the objectname string.
               Returns:
                  None
               Throws:
                  IllegalArgumentException - if number of arguments != 4
               Example:
                  Host a <name> <user> <port> 
            ";;& 
         getHostName|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               getHostName
                  Returns the value of name
               Parameters:
                  None
               Returns:
                  The value of name.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Host b 1 2 3
                  b.getName
                  >>>1
            ";;& 
         getHostUser|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               getHostUser
                  Returns the value of user
               Parameters:
                  None
               Returns:
                  The value of user.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Host b 1 2 3
                  b.getUser
                  >>>2
            ";;& 
         getHostPort|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               getHostPort
                  Returns the value of port
               Parameters:
                  None
               Returns:
                  The value of port.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Host b 1 2 3
                  b.getPort
                  >>>3
            ";;& 
         getClass|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               getClass
                  Returns the runtime class of this Object.
               Parameters:
                  None
               Returns:
                  The Class object that represents the runtime class of this object.
               Throws:
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Host b 1 2 3
                  b.getClass
                  >>>class Host
            ";;&
         toString|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               toString
                  Returns a String object representing this Host object in sorted order. 
               Parameters:
                  None
               Throws:
                  NotInPathException - if sort not in path
                                     - if tr not in path
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Host b 1 2 3
                  b.toString
                  >>><name>|<port>|<user>
            ";;&
         hashCode|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               hashCode
                  Returns a hash code for this Host object.
               Parameters:
                  None
               Returns:
                  a hash code for this Host.
               Throws:
                  NotInPathException - if bc not in path
                  IllegalArgumentException - if number of arguments != 0
               Example:
                  Host b 1 2 3
                  b.hashCode
            ";;&
         equals|all)
            match=$(Boolean.TRUE)
            System.${printStream}.println "
               equals
                  Returns true if and only if the argument is a Host object that 
                  represents the same Host value as this object. 
               Parameters:
                  anObject - The object to compare this Host against
               Returns:
                  true if the Host objects represent the same value; false otherwise.
               Throws:
                  IllegalArgumentException - if number of arguments != 1
                                           - if arguent is no object
               Example:
                  Host b 1 2 3
                  Host c 1 2 3
                  a.equals b
                  >>>true
            ";;&
         *)   if [[ $match == $(Boolean.FALSE) ]]; then
                 System.${printStream}.println "                                  
                       No help found for $1
                    "   
              fi
              ;;& 
      esac               
      shift
   done 
}


